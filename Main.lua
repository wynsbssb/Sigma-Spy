--[[
	⣿⣿⣿⣿⣿ SIGMA SPY ⣿⣿⣿⣿⣿
	⣿⣿⣯⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉
	⠉⠻⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠈⠻⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠙⢿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠀⠀⣉⣿⣿⣿⠆⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⣠⣾⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⢀⣴⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣀⣴⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣿⣿⣟⣁⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀
	⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿

	@author depso (depthso)
	@repo https://github.com/depthso
	@license MIT
	@description Sigma Remote Spy for Roblox
    
	This file is COMPILED, check /src folder for the source
	Build scripts are available in /build
]]

local a,b={UseWorkspace=false,NoActors=false,FolderName='Sigma Spy',RepoUrl=
[[https://raw.githubusercontent.com/depthso/Sigma-Spy/refs/heads/main]],
ParserUrl=
[[https://raw.githubusercontent.com/depthso/Roblox-parser/refs/heads/main/dist/Main.luau]]
},{...}local c=b[1]if typeof(c)=='table'then for d,e in c do a[d]=e end end
local d=setmetatable({},{__index=function(d,e)local f=game:GetService(e)return
cloneref(f)end})local e=(function()local e,f={UseWorkspace=false,Folder=
'Sigma spy',RepoUrl=nil,FolderStructure={['Sigma Spy']={'assets'}}}function e:
Init(g)local h,i=self.FolderStructure,g.Services f=i.HttpService self:
CheckFolders(h)end function e:PushConfig(g)for h,i in next,g do self[h]=i end
end function e:UrlFetch(g)local h={Url=g:gsub(' ','%%20'),Method='GET'}local i,j
=pcall(request,h)if not i then warn
'[!] HTTP \u{8bf7}\u{6c42}\u{51fa}\u{9519}\u{ff01}\u{8bf7}\u{68c0}\u{67e5}\u{63a7}\u{5236}\u{53f0} (F9)'
warn('> \u{94fe}\u{63a5}:',g)error(j)return''end local k,l=j.Body,j.StatusCode
if l==404 then warn
'[!] \u{8bf7}\u{6c42}\u{7684}\u{6587}\u{4ef6}\u{5df2}\u{79fb}\u{52a8}\u{6216}\u{88ab}\u{5220}\u{9664}\u{3002}'
warn(' >',g)return''end return k,j end function e:MakePath(g)local h=self.Folder
return`{h}/{g}`end function e:LoadCustomasset(g)if not getcustomasset then
return end if not g then return end local h=readfile(g)if#h<=0 then return end
local i,j=pcall(getcustomasset,g)if not i then return end if not j or#j<=0 then
return end return j end function e:GetFile(g,h)local i,j,k,l=self.RepoUrl,self.
UseWorkspace,self:MakePath(g),''if j then l=readfile(k)else l=self:UrlFetch(`{i}/{
g}`)end if h then self:FileCheck(k,function()return l end)return self:
LoadCustomasset(k)end return l end function e:GetTemplate(g)return self:GetFile(
`templates/{g}.lua`)end function e:FileCheck(g,h)if isfile(g)then return end
local i=h()writefile(g,i)end function e:FolderCheck(g)if isfolder(g)then return
end makefolder(g)end function e:CheckPath(g,h)return g and`{g}/{h}`or h end
function e:CheckFolders(g,h)for i,j in next,g do if typeof(j)=='table'then local
k=self:CheckPath(h,i)self:FolderCheck(k)self:CheckFolders(j,k)continue end local
k=self:CheckPath(h,j)self:FolderCheck(k)end end function e:TemplateCheck(g,h)
self:FileCheck(g,function()return self:GetTemplate(h)end)end function e:GetAsset
(g,h)return self:GetFile(`assets/{g}`,h)end function e:GetModule(g,h)local i=`{g
}.lua`if h then self:TemplateCheck(i,h)local j=readfile(i)local k=loadstring(j)
if k then return j end return self:GetTemplate(h)end return self:GetFile(i)end
function e:LoadLibraries(g,...)local h={}for i,j in next,g do local k=typeof(j)
=='table'and j[1]=='base64'j=k and j[2]or j if typeof(j)~='string'and not k then
h[i]=j continue end if k then j=crypt.base64decode(j)g[i]=j end local l,m=
loadstring(j,i)assert(l,`\229\138\160\232\189\189 {i} \229\164\177\232\180\165: {
m}`)h[i]=l(...)end return h end function e:LoadModules(g,h)for i,j in next,g do
local k=j.Init if not k then continue end j:Init(h)end end function e:CreateFont
(g,h)if not h then return end local i=`assets/{g}.json`local j,k=self:MakePath(i
),{name=g,faces={{name='Regular',weight=400,style='Normal',assetId=h}}}local l=f
:JSONEncode(k)writefile(j,l)return j end function e:CompileModule(g)local h=
'local Libraries = {'for i,j in g do if typeof(j)~='string'then continue end h
..=`\t{i} = (function()\n{j}\nend)(),\n`end h..='}'return h end function e:
MakeActorScript(g,h)local i=e:CompileModule(g)i..=
'\r\n\tlocal ExtraData = {\r\n\t\tIsActor = true\r\n\t}\r\n\t'i..=`Libraries.Hook:BeginService(Libraries, ExtraData, {
h})`return i end return e end)()e:PushConfig(a)e:Init{Services=d}local f=e.
FolderName local g,h={Config=e:GetModule(`{f}/Config`,'Config'),ReturnSpoofs=e:
GetModule(`{f}/Return spoofs`,'\u{8fd4}\u{56de}\u{503c}\u{6b3a}\u{9a97}'),
Configuration=a,Files=e,Process={'base64',
[[]]
},Hook={'base64',
[[]]
},Flags={'base64',
[[dHlwZSBGbGFnVmFsdWUgPSBib29sZWFufG51bWJlcnxhbnkNCnR5cGUgRmxhZyA9IHsNCiAgICBWYWx1ZTogRmxhZ1ZhbHVlLA0KICAgIExhYmVsOiBzdHJpbmcsDQogICAgQ2F0ZWdvcnk6IHN0cmluZw0KfQ0KdHlwZSBGbGFncyA9IHsNCiAgICBbc3RyaW5nXTogRmxhZw0KfQ0KdHlwZSB0YWJsZSA9IHsNCiAgICBbYW55XTogYW55DQp9DQoNCmxvY2FsIE1vZHVsZSA9IHsNCiAgICBGbGFncyA9IHsNCiAgICAgICAgLS0gUHJldmVudFJlbmFtaW5nID0gew0KICAgICAgICAtLSAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgLS0gICAgIExhYmVsID0gIuemgeatoumHjeWRveWQjSIsDQogICAgICAgIC0tIH0sDQogICAgICAgIC0tIFByZXZlbnRQYXJlbnRpbmcgPSB7DQogICAgICAgIC0tICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAtLSAgICAgTGFiZWwgPSAi56aB5q2i6K6+572u54i257qnIiwNCiAgICAgICAgLS0gfSwNCiAgICAgICAgTm9Db21tZW50cyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICLml6Dms6jph4oiLA0KICAgICAgICB9LA0KICAgICAgICBTZWxlY3ROZXdlc3QgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAi6Ieq5Yqo6YCJ5oup5pyA5pawIiwNCiAgICAgICAgfSwNCiAgICAgICAgRGVjb21waWxlUG9wb3V0ID0geyAtLSBMb3ZyZSBTSFVTSA0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIuWPjee8luivkeW8ueWHuueql+WPoyIsDQogICAgICAgIH0sDQogICAgICAgIElnbm9yZU5pbCA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIuW/veeVpeepuueItue6pyIsDQogICAgICAgIH0sDQogICAgICAgIExvZ0V4cGxvaXQgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICLorrDlvZUgRXhwbG9pdCDosIPnlKgiLA0KICAgICAgICB9LA0KICAgICAgICBMb2dSZWNpdmVzID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAi6K6w5b2V5o6l5pS2IiwNCiAgICAgICAgfSwNCiAgICAgICAgUGF1c2VkID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIuaaguWBnCIsDQogICAgICAgICAgICBLZXliaW5kID0gRW51bS5LZXlDb2RlLlENCiAgICAgICAgfSwNCiAgICAgICAgS2V5YmluZHNFbmFibGVkID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAi5ZCv55So5b+r5o236ZSuIg0KICAgICAgICB9LA0KICAgICAgICBGaW5kU3RyaW5nRm9yTmFtZSA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIuafpeaJvuWPguaVsOWvueW6lOWQjeensCINCiAgICAgICAgfSwNCiAgICAgICAgVWlWaXNpYmxlID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAi55WM6Z2i5Y+v6KeBIiwNCiAgICAgICAgICAgIEtleWJpbmQgPSBFbnVtLktleUNvZGUuUA0KICAgICAgICB9LA0KICAgICAgICBOb1RyZWVOb2RlcyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICLml6DliIbnu4QiDQogICAgICAgIH0sDQogICAgICAgIFRhYmxlQXJncyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICLooajlj4LmlbAiDQogICAgICAgIH0sDQogICAgICAgIE5vVmFyaWFibGVzID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIuaXoOWPmOmHj+WOi+e8qSINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gTW9kdWxlOkdldEZsYWdWYWx1ZShOYW1lOiBzdHJpbmcpOiBGbGFnVmFsdWUNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgcmV0dXJuIEZsYWcuVmFsdWUNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6U2V0RmxhZ1ZhbHVlKE5hbWU6IHN0cmluZywgVmFsdWU6IEZsYWdWYWx1ZSkNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgRmxhZy5WYWx1ZSA9IFZhbHVlDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlNldEZsYWdDYWxsYmFjayhOYW1lOiBzdHJpbmcsIENhbGxiYWNrOiAoLi4uYW55KSAtPiAuLi5hbnkpDQogICAgbG9jYWwgRmxhZyA9IHNlbGY6R2V0RmxhZyhOYW1lKQ0KICAgIEZsYWcuQ2FsbGJhY2sgPSBDYWxsYmFjaw0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpTZXRGbGFnQ2FsbGJhY2tzKERpY3Q6IHt9KQ0KICAgIGZvciBOYW1lLCBDYWxsYmFjazogKC4uLmFueSkgLT4gLi4uYW55IGluIG5leHQsIERpY3QgZG8gDQogICAgICAgIHNlbGY6U2V0RmxhZ0NhbGxiYWNrKE5hbWUsIENhbGxiYWNrKQ0KICAgIGVuZA0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpHZXRGbGFnKE5hbWU6IHN0cmluZyk6IEZsYWcNCiAgICBsb2NhbCBBbGxGbGFncyA9IHNlbGY6R2V0RmxhZ3MoKQ0KICAgIGxvY2FsIEZsYWcgPSBBbGxGbGFnc1tOYW1lXQ0KICAgIGFzc2VydChGbGFnLCAi5qCH5b+X5LiN5a2Y5Zyo77yBIikNCiAgICByZXR1cm4gRmxhZw0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpBZGRGbGFnKE5hbWU6IHN0cmluZywgRmxhZzogRmxhZykNCiAgICBsb2NhbCBBbGxGbGFncyA9IHNlbGY6R2V0RmxhZ3MoKQ0KICAgIEFsbEZsYWdzW05hbWVdID0gRmxhZw0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpHZXRGbGFncygpOiBGbGFncw0KICAgIHJldHVybiBzZWxmLkZsYWdzDQplbmQNCg0KcmV0dXJuIE1vZHVsZQ0K]]
},Ui={'base64',
[[bG9jYWwgVWkgPSB7DQoJRGVmYXVsdEVkaXRvckNvbnRlbnQgPSBbPVstLVtbDQoJU2lnbWEgU3B577yM55SxIGRlcHNvIOe8luWGmQ0KCemSqeWtkOW3sumHjeWGme+8jOW5tuS/ruWkjeS6huabtOWkmumXrumimO+8gQ0KDQoJRGlzY29yZO+8mmh0dHBzOi8vZGlzY29yZC5nZy9ia1VrbTJ2U2J2DQpdXV09XSwNCglMb2dMaW1pdCA9IDEwMCwNCiAgICBTZWFzb25MYWJlbHMgPSB7IA0KICAgICAgICBbIuS4gOaciCJdID0gIuKbhCAlcyDim4QiLCANCiAgICAgICAgWyLkuozmnIgiXSA9ICLwn4yo77iPICVzIPCfj4IiLCANCiAgICAgICAgWyLkuInmnIgiXSA9ICLwn4y5ICVz8J+MuiAiLCANCiAgICAgICAgWyLlm5vmnIgiXSA9ICLwn5CjICVzIOKcne+4jyIsIA0KICAgICAgICBbIuS6lOaciCJdID0gIvCfkJ0gJXMg8J+MniIsIA0KICAgICAgICBbIuWFreaciCJdID0gIvCfjLIgJXMg8J+llSIsIA0KICAgICAgICBbIuS4g+aciCJdID0gIvCfjIogJXMg8J+MhSIsIA0KICAgICAgICBbIuWFq+aciCJdID0gIuKYgO+4jyAlcyDwn4yeIiwgDQogICAgICAgIFsi5Lmd5pyIIl0gPSAi8J+NgSAlcyDwn42BIiwgDQogICAgICAgIFsi5Y2B5pyIIl0gPSAi8J+OgyAlcyDwn46DIiwgDQogICAgICAgIFsi5Y2B5LiA5pyIIl0gPSAi8J+NgiAlcyDwn42CIiwgDQogICAgICAgIFsi5Y2B5LqM5pyIIl0gPSAi8J+OhCAlcyDwn46BIg0KICAgIH0sDQoJU2NhbGVzID0gew0KCQlbIuenu+WKqOiuvuWkhyJdID0gVURpbTIuZnJvbU9mZnNldCg0ODAsIDI4MCksDQoJCVsi5qGM6Z2i6K6+5aSHIl0gPSBVRGltMi5mcm9tT2Zmc2V0KDYwMCwgNDAwKSwNCgl9LA0KICAgIEJhc2VDb25maWcgPSB7DQogICAgICAgIFRoZW1lID0gIlNpZ21hU3B5IiwNCiAgICAgICAgTm9TY3JvbGwgPSB0cnVlLA0KICAgIH0sDQoJT3B0aW9uVHlwZXMgPSB7DQoJCWJvb2xlYW4gPSAiQ2hlY2tib3giLA0KCX0sDQoJRGlzcGxheVJlbW90ZUluZm8gPSB7DQoJCSJNZXRhTWV0aG9kIiwNCgkJIk1ldGhvZCIsDQoJCSJSZW1vdGUiLA0KCQkiQ2FsbGluZ1NjcmlwdCIsDQoJCSJJc0FjdG9yIiwNCgkJIklkIg0KCX0sDQoNCiAgICBXaW5kb3cgPSBuaWwsDQogICAgUmFuZG9tU2VlZCA9IFJhbmRvbS5uZXcodGljaygpKSwNCglMb2dzID0gc2V0bWV0YXRhYmxlKHt9LCB7X19tb2RlID0gImsifSksDQoJTG9nUXVldWUgPSBzZXRtZXRhdGFibGUoe30sIHtfX21vZGUgPSAidiJ9KSwNCn0gDQoNCnR5cGUgdGFibGUgPSB7DQoJW2FueV06IGFueQ0KfQ0KDQp0eXBlIExvZyA9IHsNCglSZW1vdGU6IEluc3RhbmNlLA0KCU1ldGhvZDogc3RyaW5nLA0KCUFyZ3M6IHRhYmxlLA0KCUlzUmVjZWl2ZTogYm9vbGVhbj8sDQoJTWV0YU1ldGhvZDogc3RyaW5nPywNCglPcmlnbmFsRnVuYzogKCguLi5hbnkpIC0+IC4uLmFueSk/LA0KCUNhbGxpbmdTY3JpcHQ6IEluc3RhbmNlPywNCglDYWxsaW5nRnVuY3Rpb246ICgoLi4uYW55KSAtPiAuLi5hbnkpPywNCglDbGFzc0RhdGE6IHRhYmxlPywNCglSZXR1cm5WYWx1ZXM6IHRhYmxlPywNCglSZW1vdGVEYXRhOiB0YWJsZT8sDQoJSWQ6IHN0cmluZywNCglTZWxlY3RhYmxlOiB0YWJsZSwNCglIZWFkZXJEYXRhOiB0YWJsZSwNCglWYWx1ZVN3YXBzOiB0YWJsZSwNCglUaW1lc3RhbXA6IG51bWJlciwNCglJc0V4cGxvaXQ6IGJvb2xlYW4NCn0NCg0KLS0vLyBDb21wYXRpYmlsaXR5DQpsb2NhbCBTZXRDbGlwYm9hcmQgPSBzZXRjbGlwYm9hcmQgb3IgdG9jbGlwYm9hcmQgb3Igc2V0X2NsaXBib2FyZA0KDQotLS8vIExpYnJhcmllcw0KbG9jYWwgUmVHdWkgPSBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgnaHR0cHM6Ly9naXRodWIuY29tL2RlcHRoc28vRGVhci1SZUd1aS9yYXcvcmVmcy9oZWFkcy9tYWluL1JlR3VpLmx1YScpLCAiUmVHdWkiKSgpDQoNCi0tLy8gTW9kdWxlcw0KbG9jYWwgRmxhZ3MNCmxvY2FsIEdlbmVyYXRpb24NCmxvY2FsIFByb2Nlc3MNCmxvY2FsIEhvb2sgDQpsb2NhbCBDb25maWcNCmxvY2FsIENvbW11bmljYXRpb24NCmxvY2FsIEZpbGVzDQoNCmxvY2FsIEFjdGl2ZURhdGEgPSBuaWwNCmxvY2FsIFJlbW90ZXNDb3VudCA9IDANCg0KbG9jYWwgVGV4dEZvbnQgPSBGb250LmZyb21FbnVtKEVudW0uRm9udC5Db2RlKQ0KbG9jYWwgRm9udFN1Y2Nlc3MgPSBmYWxzZQ0KbG9jYWwgQ29tbUNoYW5uZWwNCg0KZnVuY3Rpb24gVWk6SW5pdChEYXRhKQ0KICAgIGxvY2FsIE1vZHVsZXMgPSBEYXRhLk1vZHVsZXMNCg0KCS0tLy8gTW9kdWxlcw0KCUZsYWdzID0gTW9kdWxlcy5GbGFncw0KCUdlbmVyYXRpb24gPSBNb2R1bGVzLkdlbmVyYXRpb24NCglQcm9jZXNzID0gTW9kdWxlcy5Qcm9jZXNzDQoJSG9vayA9IE1vZHVsZXMuSG9vaw0KCUNvbmZpZyA9IE1vZHVsZXMuQ29uZmlnDQoJQ29tbXVuaWNhdGlvbiA9IE1vZHVsZXMuQ29tbXVuaWNhdGlvbg0KCUZpbGVzID0gTW9kdWxlcy5GaWxlcw0KDQoJLS0vLyBSZUd1aQ0KCXNlbGY6TG9hZEZvbnQoKQ0KCXNlbGY6TG9hZFJlR3VpKCkNCglzZWxmOkNoZWNrU2NhbGUoKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNldENvbW1DaGFubmVsKE5ld0NvbW1DaGFubmVsOiBCaW5kYWJsZUV2ZW50KQ0KCUNvbW1DaGFubmVsID0gTmV3Q29tbUNoYW5uZWwNCmVuZA0KDQpmdW5jdGlvbiBVaTpDaGVja1NjYWxlKCkNCglsb2NhbCBCYXNlQ29uZmlnID0gc2VsZi5CYXNlQ29uZmlnDQoJbG9jYWwgU2NhbGVzID0gc2VsZi5TY2FsZXMNCg0KCWxvY2FsIElzTW9iaWxlID0gUmVHdWk6SXNNb2JpbGVEZXZpY2UoKQ0KCWxvY2FsIERldmljZSA9IElzTW9iaWxlIGFuZCAi56e75Yqo6K6+5aSHIiBvciAi5qGM6Z2i6K6+5aSHIg0KDQoJQmFzZUNvbmZpZy5TaXplID0gU2NhbGVzW0RldmljZV0NCmVuZA0KDQpmdW5jdGlvbiBVaTpTZXRDbGlwYm9hcmQoQ29udGVudDogc3RyaW5nKQ0KCVNldENsaXBib2FyZChDb250ZW50KQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlR1cm5TZWFzb25hbChUZXh0OiBzdHJpbmcpOiBzdHJpbmcNCiAgICBsb2NhbCBTZWFzb25MYWJlbHMgPSBzZWxmLlNlYXNvbkxhYmVscw0KICAgIGxvY2FsIE1vbnRoID0gb3MuZGF0ZSgiJUIiKQ0KCS0tIOWwhuiLseaWh+aciOS7veWQjei9rOaNouS4uuS4reaWh++8jOS7peS+v+WMuemFjSBTZWFzb25MYWJlbHMg55qE6ZSuDQoJbG9jYWwgQ2hpbmVzZU1vbnRoID0gKHsNCgkJSmFudWFyeSA9ICLkuIDmnIgiLCBGZWJydWFyeSA9ICLkuozmnIgiLCBNYXJjaCA9ICLkuInmnIgiLCBBcHJpbCA9ICLlm5vmnIgiLCANCgkJTWF5ID0gIuS6lOaciCIsIEp1bmUgPSAi5YWt5pyIIiwgSnVseSA9ICLkuIPmnIgiLCBBdWd1c3QgPSAi5YWr5pyIIiwgDQoJCVNlcHRlbWJlciA9ICLkuZ3mnIgiLCBPY3RvYmVyID0gIuWNgeaciCIsIE5vdmVtYmVyID0gIuWNgeS4gOaciCIsIERlY2VtYmVyID0gIuWNgeS6jOaciCINCgl9KVtNb250aF0gb3IgTW9udGggDQogICAgbG9jYWwgQmFzZSA9IFNlYXNvbkxhYmVsc1tDaGluZXNlTW9udGhdDQoNCiAgICByZXR1cm4gQmFzZTpmb3JtYXQoVGV4dCkNCmVuZA0KDQpmdW5jdGlvbiBVaTpMb2FkRm9udCgpDQoJbG9jYWwgRm9udEZpbGUgPSBzZWxmLkZvbnRKc29uRmlsZQ0KDQoJLS0vLyBHZXQgRm9udEZhY2UgQXNzZXRJZA0KCWxvY2FsIEFzc2V0SWQgPSBGaWxlczpMb2FkQ3VzdG9tYXNzZXQoRm9udEZpbGUpDQoJaWYgbm90IEFzc2V0SWQgdGhlbiByZXR1cm4gZW5kDQoNCgktLS8vIENyZWF0ZSBjdXN0b20gRm9udEZhY2UNCglsb2NhbCBOZXdGb250ID0gRm9udC5uZXcoQXNzZXRJZCkNCglUZXh0Rm9udCA9IE5ld0ZvbnQNCglGb250U3VjY2VzcyA9IHRydWUNCmVuZA0KDQpmdW5jdGlvbiBVaTpTZXRGb250RmlsZShGb250RmlsZTogc3RyaW5nKQ0KCXNlbGYuRm9udEpzb25GaWxlID0gRm9udEZpbGUNCmVuZA0KDQpmdW5jdGlvbiBVaTpGb250V2FzU3VjY2Vzc2Z1bCgpDQoJaWYgRm9udFN1Y2Nlc3MgdGhlbiByZXR1cm4gZW5kDQoNCgktLS8vIEVycm9yIG1lc3NhZ2UNCglzZWxmOlNob3dNb2RhbCh7DQoJCSLpgZfmhr7nmoTmmK/vvIzmgqjnmoTmiafooYzlmajmnKrog73kuIvovb3lrZfkvZPvvIzlm6DmraTlt7LliIfmjaLliLDigJxEYXJr4oCd77yI5rex6Imy77yJ5Li76aKYIiwNCgkJIlxu5aaC5p6c5oKo5oOz5L2/55SoIEltR3VpIOS4u+mimO+8jOivt+S4i+i9veWtl+S9kyAoYXNzZXRzL1Byb2dneUNsZWFuLnR0ZilcbuW5tuWwhuWFtuaUvuWFpeaCqOeahOW3peS9nOWMuuaWh+S7tuWkuVxuKFNpZ21hIFNweS9hc3NldHMpIOS4rSIsDQoJfSkNCmVuZA0KDQpmdW5jdGlvbiBVaTpMb2FkUmVHdWkoKQ0KCWxvY2FsIFRoZW1lQ29uZmlnID0gQ29uZmlnLlRoZW1lQ29uZmlnDQoJVGhlbWVDb25maWcuVGV4dEZvbnQgPSBUZXh0Rm9udA0KDQoJLS0vLyBSZUd1aQ0KCVJlR3VpOkRlZmluZVRoZW1lKCJTaWdtYVNweSIsIFRoZW1lQ29uZmlnKQ0KZW5kDQoNCnR5cGUgQ3JlYXRlQnV0dG9ucyA9IHsNCglCYXNlOiB0YWJsZT8sDQoJQnV0dG9uczogdGFibGUsDQoJTm9UYWJsZTogYm9vbGVhbj8NCn0NCmZ1bmN0aW9uIFVpOkNyZWF0ZUJ1dHRvbnMoUGFyZW50LCBEYXRhOiBDcmVhdGVCdXR0b25zKQ0KCWxvY2FsIEJhc2UgPSBEYXRhLkJhc2Ugb3Ige30NCglsb2NhbCBCdXR0b25zID0gRGF0YS5CdXR0b25zDQoJbG9jYWwgTm9UYWJsZSA9IERhdGEuTm9UYWJsZQ0KDQoJLS0vLyBDcmVhdGUgdGFibGUgbGF5b3V0DQoJaWYgbm90IE5vVGFibGUgdGhlbg0KCQlQYXJlbnQgPSBQYXJlbnQ6VGFibGUoew0KCQkJTWF4Q29sdW1ucyA9IDMNCgkJfSk6TmV4dFJvdygpDQoJZW5kDQoNCgktLS8vIENyZWF0ZSBidXR0b25zDQoJZm9yIF8sIEJ1dHRvbiBpbiBuZXh0LCBCdXR0b25zIGRvDQoJCWxvY2FsIENvbnRhaW5lciA9IFBhcmVudA0KCQlpZiBub3QgTm9UYWJsZSB0aGVuDQoJCQlDb250YWluZXIgPSBQYXJlbnQ6TmV4dENvbHVtbigpDQoJCWVuZA0KDQoJCVJlR3VpOkNoZWNrQ29uZmlnKEJ1dHRvbiwgQmFzZSkNCgkJQ29udGFpbmVyOkJ1dHRvbihCdXR0b24pDQoJZW5kDQplbmQNCg0KZnVuY3Rpb24gVWk6Q3JlYXRlV2luZG93KFdpbmRvd0NvbmZpZykNCiAgICBsb2NhbCBCYXNlQ29uZmlnID0gc2VsZi5CYXNlQ29uZmlnDQoJbG9jYWwgQ29uZmlnID0gUHJvY2VzczpEZWVwQ2xvbmVUYWJsZShCYXNlQ29uZmlnKQ0KCVByb2Nlc3M6TWVyZ2UoQ29uZmlnLCBXaW5kb3dDb25maWcpDQoNCgktLS8vIENyZWF0ZSBXaW5kb3cNCglsb2NhbCBXaW5kb3cgPSBSZUd1aTpXaW5kb3coQ29uZmlnKQ0KDQoJLS0vLyBTd2l0Y2ggdG8gRGFya1RoZW1lIGluc3RlYWQgb2YgdGhlIEltR3VpIHRoZW1lIGlmIHRoZSBmb250IGNhbm5vdCBiZSBsb2FkZWQNCglpZiBub3QgRm9udFN1Y2Nlc3MgdGhlbiANCgkJV2luZG93OlNldFRoZW1lKCJEYXJrVGhlbWUiKQ0KCWVuZA0KCQ0KCS0tLy8gQ3JlYXRlIFdpbmRvdw0KCXJldHVybiBXaW5kb3cNCmVuZA0KDQp0eXBlIEFza0NvbmZpZyA9IHsNCglUaXRsZTogc3RyaW5nLA0KCUNvbnRlbnQ6IHRhYmxlLA0KCU9wdGlvbnM6IHRhYmxlDQp9DQpmdW5jdGlvbiBVaTpBc2tVc2VyKENvbmZpZzogQXNrQ29uZmlnKTogc3RyaW5nDQoJbG9jYWwgV2luZG93ID0gc2VsZi5XaW5kb3cNCglsb2NhbCBBbnN3ZXJlZCA9IGZhbHNlDQoNCgktLS8vIENyZWF0ZSBtb2RhbA0KCWxvY2FsIE1vZGFsV2luZG93ID0gV2luZG93OlBvcHVwTW9kYWwoew0KCQlUaXRsZSA9IENvbmZpZy5UaXRsZQ0KCX0pDQoJTW9kYWxXaW5kb3c6TGFiZWwoew0KCQlUZXh0ID0gdGFibGUuY29uY2F0KENvbmZpZy5Db250ZW50LCAiXG4iKSwNCgkJVGV4dFdyYXBwZWQgPSB0cnVlDQoJfSkNCglNb2RhbFdpbmRvdzpTZXBhcmF0b3IoKQ0KDQoJLS0vLyBBbnN3ZXJzDQoJbG9jYWwgUm93ID0gTW9kYWxXaW5kb3c6Um93KHsNCgkJRXhwYW5kZWQgPSB0cnVlDQoJfSkNCglmb3IgXywgQW5zd2VyIGluIG5leHQsIENvbmZpZy5PcHRpb25zIGRvDQoJCVJvdzpCdXR0b24oew0KCQkJVGV4dCA9IEFuc3dlciwNCgkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCUFuc3dlcmVkID0gQW5zd2VyDQoJCQkJTW9kYWxXaW5kb3c6Q2xvc2VQb3B1cCgpDQoJCQllbmQsDQoJCX0pDQoJZW5kDQoNCglyZXBlYXQgd2FpdCgpIHVudGlsIEFuc3dlcmVkDQoJcmV0dXJuIEFuc3dlcmVkDQplbmQNCg0KZnVuY3Rpb24gVWk6Q3JlYXRlTWFpbldpbmRvdygpDQoJbG9jYWwgV2luZG93ID0gc2VsZjpDcmVhdGVXaW5kb3coKQ0KCXNlbGYuV2luZG93ID0gV2luZG93DQoNCgktLS8vIENoZWNrIGlmIHRoZSBmb250IHdhcyBzdWNjZXNzZnVsbHkgZG93bmxvYWRlZA0KCXNlbGY6Rm9udFdhc1N1Y2Nlc3NmdWwoKQ0KCXNlbGY6QXVyYUNvdW50ZXJTZXJ2aWNlKCkNCg0KCS0tLy8gVWlWaXNpYmxlIGZsYWcgY2FsbGJhY2sNCglGbGFnczpTZXRGbGFnQ2FsbGJhY2soIlVpVmlzaWJsZSIsIGZ1bmN0aW9uKHNlbGYsIFZpc2libGUpDQoJCVdpbmRvdzpTZXRWaXNpYmxlKFZpc2libGUpDQoJZW5kKQ0KDQoJcmV0dXJuIFdpbmRvdw0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNob3dNb2RhbChMaW5lczogdGFibGUpDQoJbG9jYWwgV2luZG93ID0gc2VsZi5XaW5kb3cNCglsb2NhbCBNZXNzYWdlID0gdGFibGUuY29uY2F0KExpbmVzLCAiXG4iKQ0KDQoJLS0vLyBNb2RhbCBXaW5kb3cNCglsb2NhbCBNb2RhbFdpbmRvdyA9IFdpbmRvdzpQb3B1cE1vZGFsKHsNCgkJVGl0bGUgPSAiU2lnbWEgU3B5Ig0KCX0pDQoJTW9kYWxXaW5kb3c6TGFiZWwoew0KCQlUZXh0ID0gTWVzc2FnZSwNCgkJUmljaFRleHQgPSB0cnVlLA0KCQlUZXh0V3JhcHBlZCA9IHRydWUNCgl9KQ0KCU1vZGFsV2luZG93OkJ1dHRvbih7DQoJCVRleHQgPSAi5aW955qEIiwNCgkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQlNb2RhbFdpbmRvdzpDbG9zZVBvcHVwKCkNCgkJZW5kLA0KCX0pDQplbmQNCg0KZnVuY3Rpb24gVWk6U2hvd1Vuc3VwcG9ydGVkRXhlY3V0b3IoTmFtZTogc3RyaW5nKQ0KCVVpOlNob3dNb2RhbCh7DQoJCSLpgZfmhr7nmoTmmK/vvIzmgqjnmoTmiafooYzlmajkuI3mlK/mjIEgU2lnbWEgU3B5IiwNCgkJIuacgOS9s+WFjei0uemAieaLqeaYryBTd2lmdCAoZGlzY29yZC5nZy9nZXRzd2lmdGdnKSIsDQoJCWBcbuaCqOeahOaJp+ihjOWZqO+8mntOYW1lfWANCgl9KQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNob3dVbnN1cHBvcnRlZChGdW5jTmFtZTogc3RyaW5nKQ0KCVVpOlNob3dNb2RhbCh7DQoJCSLpgZfmhr7nmoTmmK/vvIzmgqjnmoTmiafooYzlmajkuI3mlK/mjIEgU2lnbWEgU3B5IiwNCgkJYFxu57y65aSx5Ye95pWw77yae0Z1bmNOYW1lfWANCgl9KQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkNyZWF0ZU9wdGlvbnNGb3JEaWN0KFBhcmVudCwgRGljdDogdGFibGUsIENhbGxiYWNrKQ0KCWxvY2FsIE9wdGlvbnMgPSB7fQ0KDQoJLS0vLyBEaWN0b25hcnkgd3JhcA0KCWZvciBLZXksIFZhbHVlIGluIG5leHQsIERpY3QgZG8NCgkJT3B0aW9uc1tLZXldID0gew0KCQkJVmFsdWUgPSBWYWx1ZSwNCgkJCUxhYmVsID0gS2V5LA0KCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbihfLCBWYWx1ZSkNCgkJCQlEaWN0W0tleV0gPSBWYWx1ZQ0KDQoJCQkJLS0vLyBJbnZva2UgY2FsbGJhY2sNCgkJCQlpZiBub3QgQ2FsbGJhY2sgdGhlbiByZXR1cm4gZW5kDQoJCQkJQ2FsbGJhY2soKQ0KCQkJZW5kDQoJCX0NCgllbmQNCg0KCS0tLy8gQ3JlYXRlIGVsZW1lbnRzDQoJc2VsZjpDcmVhdGVFbGVtZW50cyhQYXJlbnQsIE9wdGlvbnMpDQplbmQNCg0KZnVuY3Rpb24gVWk6Q2hlY2tLZXliaW5kTGF5b3V0KENvbnRhaW5lciwgS2V5Q29kZTogRW51bS5LZXlDb2RlLCBDYWxsYmFjaykNCglpZiBub3QgS2V5Q29kZSB0aGVuIHJldHVybiBDb250YWluZXIgZW5kDQoNCgktLS8vIENyZWF0ZSBSb3cgbGF5b3V0DQoJQ29udGFpbmVyID0gQ29udGFpbmVyOlJvdyh7DQoJCUhvcml6b250YWxGbGV4ID0gRW51bS5VSUZsZXhBbGlnbm1lbnQuU3BhY2VCZXR3ZWVuDQoJfSkNCg0KCS0tLy8gQWRkIEtleWJpbmQgZWxlbWVudA0KCUNvbnRhaW5lcjpLZXliaW5kKHsNCgkJTGFiZWwgPSAiIiwNCgkJVmFsdWUgPSBLZXlDb2RlLA0KCQlMYXlvdXRPcmRlciA9IDIsDQoJCUlnbm9yZUdhbWVQcm9jZXNzZWQgPSBmYWxzZSwNCgkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQktLS8vIENoZWNrIGlmIGtleWJpbmRzIGFyZSBlbmFibGVkDQoJCQlsb2NhbCBFbmFibGVkID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJLZXliaW5kc0VuYWJsZWQiKQ0KCQkJaWYgbm90IEVuYWJsZWQgdGhlbiByZXR1cm4gZW5kDQoNCgkJCS0tLy8gSW52b2tlIGNhbGxiYWNrDQoJCQlDYWxsYmFjaygpDQoJCWVuZCwNCgl9KQ0KDQoJcmV0dXJuIENvbnRhaW5lcg0KZW5kDQoNCmZ1bmN0aW9uIFVpOkNyZWF0ZUVsZW1lbnRzKFBhcmVudCwgT3B0aW9ucykNCglsb2NhbCBPcHRpb25UeXBlcyA9IHNlbGYuT3B0aW9uVHlwZXMNCgkNCgktLS8vIENyZWF0ZSB0YWJsZSBsYXlvdXQNCglsb2NhbCBUYWJsZSA9IFBhcmVudDpUYWJsZSh7DQoJCU1heENvbHVtbnMgPSAzDQoJfSk6TmV4dFJvdygpDQoNCglmb3IgTmFtZSwgRGF0YSBpbiBPcHRpb25zIGRvDQoJCWxvY2FsIFZhbHVlID0gRGF0YS5WYWx1ZQ0KCQlsb2NhbCBUeXBlID0gdHlwZW9mKFZhbHVlKQ0KDQoJCS0tLy8gQWRkIG1pc3NpbmcgdmFsdWVzIGludG8gb3B0aW9ucyB0YWJsZQ0KCQlSZUd1aTpDaGVja0NvbmZpZyhEYXRhLCB7DQoJCQlDbGFzcyA9IE9wdGlvblR5cGVzW1R5cGVdLA0KCQkJTGFiZWwgPSBOYW1lLA0KCQl9KQ0KCQkNCgkJLS0vLyBDaGVjayBpZiBhIGVsZW1lbnQgdHlwZSBleGlzdHMgZm9yIHZhbHVlIHR5cGUNCgkJbG9jYWwgQ2xhc3MgPSBEYXRhLkNsYXNzDQoJCWFzc2VydChDbGFzcywgYE5vIHtUeXBlfSB0eXBlIGV4aXN0cyBmb3Igb3B0aW9uYCkNCg0KCQlsb2NhbCBDb250YWluZXIgPSBUYWJsZTpOZXh0Q29sdW1uKCkNCgkJbG9jYWwgQ2hlY2tib3ggPSBuaWwNCg0KCQktLS8vIENoZWNrIGZvciBhIGtleWJpbmQgbGF5b3V0DQoJCWxvY2FsIEtleWJpbmQgPSBEYXRhLktleWJpbmQNCgkJQ29udGFpbmVyID0gc2VsZjpDaGVja0tleWJpbmRMYXlvdXQoQ29udGFpbmVyLCBLZXliaW5kLCBmdW5jdGlvbigpDQoJCQlDaGVja2JveDpUb2dnbGUoKQ0KCQllbmQpDQoJCQ0KCQktLS8vIENyZWF0ZSBjb2x1bW4gYW5kIGVsZW1lbnQNCgkJQ2hlY2tib3ggPSBDb250YWluZXJbQ2xhc3NdKENvbnRhaW5lciwgRGF0YSkNCgllbmQNCmVuZA0KDQotLS8vIEJvaWlpaSB3aGF0IGRpZCB5b3Ugc2F5IGFib3V0IFNpZ21hIFNweSDwn5KA8J+SgA0KZnVuY3Rpb24gVWk6RGlzcGxheUF1cmEoKQ0KICAgIGxvY2FsIFdpbmRvdyA9IHNlbGYuV2luZG93DQogICAgbG9jYWwgUmFuZCA9IHNlbGYuUmFuZG9tU2VlZA0KDQoJLS0vLyBBdXJhIChib2lpaWlpKQ0KICAgIGxvY2FsIEFVUkEgPSBSYW5kOk5leHRJbnRlZ2VyKDEsIDk5OTk5OTkpDQogICAgbG9jYWwgQVVSQURFTEFZID0gUmFuZDpOZXh0SW50ZWdlcigxLCA1KQ0KDQoJLS0vLyBUaXRsZQ0KCWxvY2FsIFRpdGxlID0gYFNpZ21hIFNweSB8IEFVUkE6IHtBVVJBfWANCglsb2NhbCBTZWFzb25hbCA9IHNlbGY6VHVyblNlYXNvbmFsKFRpdGxlKQ0KICAgIFdpbmRvdzpTZXRUaXRsZShTZWFzb25hbCkNCg0KICAgIHdhaXQoQVVSQURFTEFZKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkF1cmFDb3VudGVyU2VydmljZSgpDQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpDQogICAgICAgIHdoaWxlIHRydWUgZG8NCiAgICAgICAgICAgIHNlbGY6RGlzcGxheUF1cmEoKQ0KICAgICAgICBlbmQNCiAgICBlbmQpDQplbmQNCg0KZnVuY3Rpb24gVWk6Q3JlYXRlV2luZG93Q29udGVudChXaW5kb3cpDQogICAgLS0vLyBXaW5kb3cgZ3JvdXANCiAgICBsb2NhbCBMYXlvdXQgPSBXaW5kb3c6TGlzdCh7DQogICAgICAgIFVpUGFkZGluZyA9IDIsDQogICAgICAgIEhvcml6b250YWxGbGV4ID0gRW51bS5VSUZsZXhBbGlnbm1lbnQuRmlsbCwNCiAgICAgICAgVmVydGljYWxGbGV4ID0gRW51bS5VSUZsZXhBbGlnbm1lbnQuRmlsbCwNCiAgICAgICAgRmlsbERpcmVjdGlvbiA9IEVudW0uRmlsbERpcmVjdGlvbi5WZXJ0aWNhbCwNCiAgICAgICAgRmlsbCA9IHRydWUNCiAgICB9KQ0KDQoJLS0vLyBSZW1vdGVzIGxpc3QNCiAgICBzZWxmLlJlbW90ZXNMaXN0ID0gTGF5b3V0OkNhbnZhcyh7DQogICAgICAgIFNjcm9sbCA9IHRydWUsDQogICAgICAgIFVpUGFkZGluZyA9IDUsDQogICAgICAgIEF1dG9tYXRpY1NpemUgPSBFbnVtLkF1dG9tYXRpY1NpemUuTm9uZSwNCiAgICAgICAgRmxleE1vZGUgPSBFbnVtLlVJRmxleE1vZGUuTm9uZSwNCiAgICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLCAxMzAsIDEsIDApDQogICAgfSkNCg0KCS0tLy8gVGFiIGJveA0KCWxvY2FsIEluZm9TZWxlY3RvciA9IExheW91dDpUYWJTZWxlY3Rvcih7DQogICAgICAgIE5vQW5pbWF0aW9uID0gdHJ1ZSwNCiAgICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAtMTMwLCAwLjQsIDApLA0KICAgIH0pDQoNCglzZWxmLkluZm9TZWxlY3RvciA9IEluZm9TZWxlY3Rvcg0KCXNlbGYuQ2FudmFzTGF5b3V0ID0gTGF5b3V0DQoNCgktLS8vIE1ha2UgdGFicw0KCXNlbGY6TWFrZUVkaXRvclRhYihJbmZvU2VsZWN0b3IpDQoJc2VsZjpNYWtlT3B0aW9uc1RhYihJbmZvU2VsZWN0b3IpDQoJDQoJaWYgQ29uZmlnLkRlYnVnIHRoZW4NCgkJc2VsZjpDb25zb2xlVGFiKEluZm9TZWxlY3RvcikNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBVaTpDb25zb2xlVGFiKEluZm9TZWxlY3RvcikNCglsb2NhbCBUYWIgPSBJbmZvU2VsZWN0b3I6Q3JlYXRlVGFiKHsNCgkJTmFtZSA9ICLmjqfliLblj7AiDQoJfSkNCg0KCWxvY2FsIENvbnNvbGUNCglsb2NhbCBCdXR0b25zUm93ID0gVGFiOlJvdygpDQoNCglCdXR0b25zUm93OkJ1dHRvbih7DQoJCVRleHQgPSAi5riF6ZmkIiwNCgkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQlDb25zb2xlOkNsZWFyKCkNCgkJZW5kDQoJfSkNCglCdXR0b25zUm93OkJ1dHRvbih7DQoJCVRleHQgPSAi5aSN5Yi2IiwNCgkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQl0b2NsaXBib2FyZChDb25zb2xlOkdldFZhbHVlKCkpDQoJCWVuZA0KCX0pDQoJQnV0dG9uc1JvdzpCdXR0b24oew0KCQlUZXh0ID0gIuaaguWBnCIsDQoJCUNhbGxiYWNrID0gZnVuY3Rpb24oc2VsZikNCgkJCWxvY2FsIEVuYWJsZWQgPSBub3QgQ29uc29sZS5FbmFibGVkDQoJCQlsb2NhbCBUZXh0ID0gRW5hYmxlZCBhbmQgIuaaguWBnCIgb3IgIuW3suaaguWBnCINCgkJCXNlbGYuVGV4dCA9IFRleHQNCg0KCQkJLS0vLyBVcGRhdGUgY29uc29sZQ0KCQkJQ29uc29sZS5FbmFibGVkID0gRW5hYmxlZA0KCQllbmQsDQoJfSkNCglCdXR0b25zUm93OkV4cGFuZCgpDQoNCgktLS8vIENyZWF0ZSBjb25zb2xlDQoJQ29uc29sZSA9IFRhYjpDb25zb2xlKHsNCgkJVGV4dCA9ICItLSDnlLEgZGVwc28g5Yib5bu6IiwNCgkJUmVhZE9ubHkgPSB0cnVlLA0KCQlCb3JkZXIgPSBmYWxzZSwNCgkJRmlsbCA9IHRydWUsDQoJCUVuYWJsZWQgPSB0cnVlLA0KCQlBdXRvU2Nyb2xsID0gdHJ1ZSwNCgkJUmljaFRleHQgPSB0cnVlLA0KCQlNYXhMaW5lcyA9IDUwDQoJfSkNCg0KCXNlbGYuQ29uc29sZSA9IENvbnNvbGUNCmVuZA0KDQpmdW5jdGlvbiBVaTpDb25zb2xlTG9nKC4uLjogc3RyaW5nPykNCglsb2NhbCBDb25zb2xlID0gc2VsZi5Db25zb2xlDQoJaWYgbm90IENvbnNvbGUgdGhlbiByZXR1cm4gZW5kDQoNCglDb25zb2xlOkFwcGVuZFRleHQoLi4uKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOk1ha2VPcHRpb25zVGFiKEluZm9TZWxlY3RvcikNCglsb2NhbCBUYWIgPSBJbmZvU2VsZWN0b3I6Q3JlYXRlVGFiKHsNCgkJTmFtZSA9ICLpgInpobkiDQoJfSkNCg0KCS0tLy8gQWRkIGdsb2JhbCBvcHRpb25zDQoJVGFiOlNlcGFyYXRvcih7VGV4dD0i5pel5b+XIn0pDQoJc2VsZjpDcmVhdGVCdXR0b25zKFRhYiwgew0KCQlCYXNlID0gew0KCQkJU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyMCksDQoJCQlBdXRvbWF0aWNTaXplID0gRW51bS5BdXRvbWF0aWNTaXplLlksDQoJCX0sDQoJCUJ1dHRvbnMgPSB7DQoJCQl7DQoJCQkJVGV4dCA9ICLmuIXpmaTml6Xlv5ciLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlsb2NhbCBUYWIgPSBBY3RpdmVEYXRhIGFuZCBBY3RpdmVEYXRhLlRhYiBvciBuaWwNCg0KCQkJCQktLS8vIFJlbW92ZSB0aGUgUmVtb3RlIHRhYg0KCQkJCQlpZiBUYWIgdGhlbg0KCQkJCQkJSW5mb1NlbGVjdG9yOlJlbW92ZVRhYihUYWIpDQoJCQkJCWVuZA0KDQoJCQkJCS0tLy8gQ2xlYXIgYWxsIGxvZyBlbGVtZW50cw0KCQkJCQlBY3RpdmVEYXRhID0gbmlsDQoJCQkJCXNlbGY6Q2xlYXJMb2dzKCkNCgkJCQllbmQsDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAi5riF6Zmk5oum5oiqIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJUHJvY2VzczpVcGRhdGVBbGxSZW1vdGVEYXRhKCJCbG9ja2VkIiwgZmFsc2UpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIua4hemZpOaOkumZpCIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCVByb2Nlc3M6VXBkYXRlQWxsUmVtb3RlRGF0YSgiRXhjbHVkZWQiLCBmYWxzZSkNCgkJCQllbmQsDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAi5Yqg5YWlIERpc2NvcmQiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlQcm9jZXNzOlByb21wdERpc2NvcmRJbnZpdGUoInM5bmdtVURXZ2IiKQ0KCQkJCQlzZWxmOlNldENsaXBib2FyZCgiaHR0cHM6Ly9kaXNjb3JkLmdnL3M5bmdtVURXZ2IiKQ0KCQkJCWVuZCwNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICLlpI3liLYgR2l0aHViIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJc2VsZjpTZXRDbGlwYm9hcmQoImh0dHBzOi8vZ2l0aHViLmNvbS9kZXB0aHNvL1NpZ21hLVNweSIpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIue8lui+keasuumql+iEmuacrCIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCXNlbGY6RWRpdEZpbGUoIlJldHVybiBzcG9vZnMubHVhIiwgdHJ1ZSwgZnVuY3Rpb24oV2luZG93LCBDb250ZW50OiBzdHJpbmcpDQoJCQkJCQlXaW5kb3c6Q2xvc2UoKQ0KCQkJCQkJQ29tbUNoYW5uZWw6RmlyZSgiVXBkYXRlU3Bvb2ZzIiwgQ29udGVudCkNCgkJCQkJZW5kKQ0KCQkJCWVuZCwNCgkJCX0NCgkJfQ0KCX0pDQoNCgktLS8vIEZsYWcgb3B0aW9ucw0KCVRhYjpTZXBhcmF0b3Ioe1RleHQ9Iuiuvue9riJ9KQ0KCXNlbGY6Q3JlYXRlRWxlbWVudHMoVGFiLCBGbGFnczpHZXRGbGFncygpKQ0KDQoJc2VsZjpBZGREZXRhaWxzU2VjdGlvbihUYWIpDQplbmQNCg0KZnVuY3Rpb24gVWk6QWRkRGV0YWlsc1NlY3Rpb24oT3B0aW9uc1RhYikNCglPcHRpb25zVGFiOlNlcGFyYXRvcih7VGV4dD0i5L+h5oGvIn0pDQoJT3B0aW9uc1RhYjpCdWxsZXRUZXh0KHsNCgkJUm93cyA9IHsNCgkJCSJTaWdtYSBzcHkgLSDnlLEgZGVwc28g57yW5YaZ77yBIiwNCgkJCSLlupPvvJpSb2Jsb3gtUGFyc2VyLCBEZWFyLVJlR3VpIiwNCgkJCSLmhJ/osKIgc3luLmx1YSDlu7rorq7miJHliLbkvZzov5nkuKrlt6XlhbciDQoJCX0NCgl9KQ0KZW5kDQoNCmxvY2FsIGZ1bmN0aW9uIE1ha2VBY3RpdmVEYXRhQ2FsbGJhY2soTmFtZTogc3RyaW5nKQ0KCXJldHVybiBmdW5jdGlvbiguLi4pDQoJCWlmIG5vdCBBY3RpdmVEYXRhIHRoZW4gcmV0dXJuIGVuZA0KCQlyZXR1cm4gQWN0aXZlRGF0YVtOYW1lXShBY3RpdmVEYXRhLCAuLi4pDQoJZW5kDQplbmQNCg0KZnVuY3Rpb24gVWk6TWFrZUVkaXRvclRhYihJbmZvU2VsZWN0b3IpDQoJbG9jYWwgRGVmYXVsdCA9IHNlbGYuRGVmYXVsdEVkaXRvckNvbnRlbnQNCglsb2NhbCBTeW50YXhDb2xvcnMgPSBDb25maWcuU3ludGF4Q29sb3JzDQoNCgktLS8vIENyZWF0ZSB0YWINCglsb2NhbCBFZGl0b3JUYWIgPSBJbmZvU2VsZWN0b3I6Q3JlYXRlVGFiKHsNCgkJTmFtZSA9ICLnvJbovpHlmagiDQoJfSkNCg0KCS0tLy8gSURFDQoJbG9jYWwgQ29kZUVkaXRvciA9IEVkaXRvclRhYjpDb2RlRWRpdG9yKHsNCgkJRmlsbCA9IHRydWUsDQoJCUVkaXRhYmxlID0gdHJ1ZSwNCgkJRm9udFNpemUgPSAxMywNCgkJQ29sb3JzID0gU3ludGF4Q29sb3JzLA0KCQlGb250RmFjZSA9IFRleHRGb250LA0KCQlUZXh0ID0gRGVmYXVsdA0KCX0pDQoNCgktLS8vIEJ1dHRvbnMNCglsb2NhbCBCdXR0b25zUm93ID0gRWRpdG9yVGFiOlJvdygpDQoJc2VsZjpDcmVhdGVCdXR0b25zKEJ1dHRvbnNSb3csIHsNCgkJTm9UYWJsZSA9IHRydWUsDQoJCUJ1dHRvbnMgPSB7DQoJCQl7DQoJCQkJVGV4dCA9ICLlpI3liLYiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlsb2NhbCBTY3JpcHQgPSBDb2RlRWRpdG9yOkdldFRleHQoKQ0KCQkJCQlzZWxmOlNldENsaXBib2FyZChTY3JpcHQpDQoJCQkJZW5kDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAi6L+Q6KGMIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJbG9jYWwgU2NyaXB0ID0gQ29kZUVkaXRvcjpHZXRUZXh0KCkNCgkJCQkJbG9jYWwgRnVuYywgRXJyb3IgPSBsb2Fkc3RyaW5nKFNjcmlwdCwgIlNpZ21hU3B5LVVTRVJTQ1JJUFQiKQ0KDQoJCQkJCS0tLy8gU3ludGF4IGNoZWNrDQoJCQkJCWlmIG5vdCBGdW5jIHRoZW4NCgkJCQkJCXNlbGY6U2hvd01vZGFsKHsi6L+Q6KGM6ISa5pys6ZSZ6K+v77yBXG4iLCBFcnJvcn0pDQoJCQkJCQlyZXR1cm4NCgkJCQkJZW5kDQoNCgkJCQkJRnVuYygpDQoJCQkJZW5kDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAi6I635Y+W6L+U5Zue5YC8IiwNCgkJCQlDYWxsYmFjayA9IE1ha2VBY3RpdmVEYXRhQ2FsbGJhY2soIkdldFJldHVybiIpDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAi6ISa5pysIiwNCgkJCQlDYWxsYmFjayA9IE1ha2VBY3RpdmVEYXRhQ2FsbGJhY2soIlNjcmlwdE9wdGlvbnMiKQ0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIuaehOW7uiIsDQoJCQkJQ2FsbGJhY2sgPSBNYWtlQWN0aXZlRGF0YUNhbGxiYWNrKCJCdWlsZFNjcmlwdCIpDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAi5by55Ye656qX5Y+jIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJbG9jYWwgU2NyaXB0ID0gQ29kZUVkaXRvcjpHZXRUZXh0KCkNCgkJCQkJbG9jYWwgVGlsZSA9IEFjdGl2ZURhdGEgYW5kIEFjdGl2ZURhdGEuVGFzayBvciAiU2lnbWEgU3B5Ig0KCQkJCQlzZWxmOk1ha2VFZGl0b3JQb3BvdXRXaW5kb3coU2NyaXB0LCB7DQoJCQkJCQlUaXRsZSA9IFRpbGUNCgkJCQkJfSkNCgkJCQllbmQNCgkJCX0sDQoJCX0NCgl9KQ0KCQ0KCXNlbGYuQ29kZUVkaXRvciA9IENvZGVFZGl0b3INCmVuZA0KDQpmdW5jdGlvbiBVaTpTaG91bGRGb2N1cyhUYWIpOiBib29sZWFuDQoJbG9jYWwgSW5mb1NlbGVjdG9yID0gc2VsZi5JbmZvU2VsZWN0b3INCglsb2NhbCBBY3RpdmVUYWIgPSBJbmZvU2VsZWN0b3IuQWN0aXZlVGFiDQoNCgktLS8vIElmIHRoZXJlIGlzIGFuIGVtcHR5IHRhYg0KCWlmIG5vdCBBY3RpdmVUYWIgdGhlbg0KCQlyZXR1cm4gdHJ1ZQ0KCWVuZA0KDQoJcmV0dXJuIEluZm9TZWxlY3RvcjpDb21wYXJlVGFicyhBY3RpdmVUYWIsIFRhYikNCmVuZA0KDQpmdW5jdGlvbiBVaTpNYWtlRWRpdG9yUG9wb3V0V2luZG93KENvbnRlbnQ6IHN0cmluZywgV2luZG93Q29uZmlnOiB0YWJsZSkNCglsb2NhbCBXaW5kb3cgPSBzZWxmOkNyZWF0ZVdpbmRvdyhXaW5kb3dDb25maWcpDQoJbG9jYWwgQnV0dG9ucyA9IFdpbmRvd0NvbmZpZy5CdXR0b25zIG9yIHt9DQoJbG9jYWwgQ29sb3JzID0gQ29uZmlnLlN5bnRheENvbG9ycw0KDQoJbG9jYWwgQ29kZUVkaXRvciA9IFdpbmRvdzpDb2RlRWRpdG9yKHsNCgkJVGV4dCA9IENvbnRlbnQsDQoJCUVkaXRhYmxlID0gdHJ1ZSwNCgkJRmlsbCA9IHRydWUsDQoJCUZvbnRTaXplID0gMTMsDQoJCUNvbG9ycyA9IENvbG9ycywNCgkJRm9udEZhY2UgPSBUZXh0Rm9udA0KCX0pDQoNCgktLS8vIERlZmF1bHQgYnV0dG9ucw0KCXRhYmxlLmluc2VydChCdXR0b25zLCB7DQoJCVRleHQgPSAi5aSN5Yi2IiwNCgkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQlsb2NhbCBTY3JpcHQgPSBDb2RlRWRpdG9yOkdldFRleHQoKQ0KCQkJc2VsZjpTZXRDbGlwYm9hcmQoU2NyaXB0KQ0KCQllbmQNCgl9KQ0KDQoJLS0vLyBCdXR0b25zDQoJbG9jYWwgQnV0dG9uc1JvdyA9IFdpbmRvdzpSb3coKQ0KCXNlbGY6Q3JlYXRlQnV0dG9ucyhCdXR0b25zUm93LCB7DQoJCU5vVGFibGUgPSB0cnVlLA0KCQlCdXR0b25zID0gQnV0dG9ucw0KCX0pDQoNCglXaW5kb3c6Q2VudGVyKCkNCglyZXR1cm4gQ29kZUVkaXRvciwgV2luZG93DQplbmQNCg0KZnVuY3Rpb24gVWk6RWRpdEZpbGUoRmlsZVBhdGg6IHN0cmluZywgSW5Gb2xkZXI6IGJvb2xlYW4sIE9uU2F2ZUZ1bmM6ICgodGFibGUsIHN0cmluZykgLT4gbmlsKT8pDQoJbG9jYWwgRm9sZGVyID0gRmlsZXMuRm9sZGVyTmFtZQ0KCWxvY2FsIENvZGVFZGl0b3IsIFdpbmRvdw0KDQoJLS0vLyBSZWxhdGl2ZSB0byBTaWdtYSBTcHkgZm9sZGVyDQoJaWYgSW5Gb2xkZXIgdGhlbg0KCQlGaWxlUGF0aCA9IGB7Rm9sZGVyfS97RmlsZVBhdGh9YA0KCWVuZA0KDQoJLS0vLyBHZXQgZmlsZSBjb250ZW50DQoJbG9jYWwgQ29udGVudCA9IHJlYWRmaWxlKEZpbGVQYXRoKQ0KCUNvbnRlbnQgPSBDb250ZW50OmdzdWIoIlxyXG4iLCAiXG4iKQ0KCQ0KCWxvY2FsIEJ1dHRvbnMgPSB7DQoJCXsNCgkJCVRleHQgPSAi5L+d5a2YIiwNCgkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCWxvY2FsIFNjcmlwdCA9IENvZGVFZGl0b3I6R2V0VGV4dCgpDQoJCQkJbG9jYWwgU3VjY2VzcywgRXJyb3IgPSBsb2Fkc3RyaW5nKFNjcmlwdCwgIlNpZ21hU3B5LUVkaXRvciIpDQoNCgkJCQktLS8vIFN5bnRheCBjaGVjaw0KCQkJCWlmIG5vdCBTdWNjZXNzIHRoZW4NCgkJCQkJc2VsZjpTaG93TW9kYWwoeyLkv53lrZjmlofku7bplJnor6/vvIFcbiIsIEVycm9yfSkNCgkJCQkJcmV0dXJuDQoJCQkJZW5kDQoJCQkJDQoJCQkJLS0vLyBTYXZlIGNvbnRlbnRzDQoJCQkJd3JpdGVmaWxlKEZpbGVQYXRoLCBTY3JpcHQpDQoNCgkJCQktLS8vIEludm9rZSBvbiBzYXZlIGZ1bmN0aW9uDQoJCQkJaWYgT25TYXZlRnVuYyB0aGVuDQoJCQkJCU9uU2F2ZUZ1bmMoV2luZG93LCBTY3JpcHQpDQoJCQkJZW5kDQoJCQllbmQNCgkJfQ0KCX0NCg0KCS0tLy8gQ3JlYXRlIEVkaXRvciBXaW5kb3cNCglDb2RlRWRpdG9yLCBXaW5kb3cgPSBzZWxmOk1ha2VFZGl0b3JQb3BvdXRXaW5kb3coQ29udGVudCwgew0KCQlUaXRsZSA9IGDmraPlnKjnvJbovpHvvJp7RmlsZVBhdGh9YCwNCgkJQnV0dG9ucyA9IEJ1dHRvbnMNCgl9KQ0KZW5kDQoNCnR5cGUgTWVudU9wdGlvbnMgPSB7DQoJW3N0cmluZ106IChHdWlCdXR0b24sIC4uLmFueSkgLT4gbmlsDQp9DQpmdW5jdGlvbiBVaTpNYWtlQnV0dG9uTWVudShCdXR0b246IEluc3RhbmNlLCBVbnBhY2s6IHRhYmxlLCBPcHRpb25zOiBNZW51T3B0aW9ucykNCglsb2NhbCBXaW5kb3cgPSBzZWxmLldpbmRvdw0KCWxvY2FsIFBvcHVwID0gV2luZG93OlBvcHVwQ2FudmFzKHsNCgkJUmVsYXRpdmVUbyA9IEJ1dHRvbiwNCgkJTWF4U2l6ZVggPSA1MDAsDQoJfSkNCg0KCS0tLy8gQ3JlYXRlIFNlbGVjdGFibGVzIGZvciBzdHJpbmcsIGZ1bmN0aW9uDQoJZm9yIE5hbWUsIEZ1bmMgaW4gT3B0aW9ucyBkbw0KCQkgUG9wdXA6U2VsZWN0YWJsZSh7DQoJCQlUZXh0ID0gTmFtZSwNCgkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCUZ1bmMoUHJvY2VzczpVbnBhY2soVW5wYWNrKSkNCgkJCWVuZCwNCgkJfSkNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBVaTpSZW1vdmVQcmV2aW91c1RhYihUaXRsZTogc3RyaW5nKTogYm9vbGVhbg0KCS0tLy8gTm8gcHJldmlvdXMgdGFicw0KCWlmIG5vdCBBY3RpdmVEYXRhIHRoZW4gDQoJCXJldHVybiBmYWxzZSANCgllbmQNCg0KCS0tLy8gVGFiU2VsZWN0b3INCglsb2NhbCBJbmZvU2VsZWN0b3IgPSBzZWxmLkluZm9TZWxlY3Rvcg0KDQoJLS0vLyBQcmV2aW91cyBlbGVtZW50cw0KCWxvY2FsIFByZXZpb3VzVGFiID0gQWN0aXZlRGF0YS5UYWINCglsb2NhbCBQcmV2aW91c1NlbGVjdGFibGUgPSBBY3RpdmVEYXRhLlNlbGVjdGFibGUNCg0KCS0tLy8gUmVtb3ZlIHByZXZpb3VzIHRhYiBhbmQgc2V0IHNlbGVjdGFibGUgZm9jdXMNCglsb2NhbCBUYWJGb2N1c2VkID0gc2VsZjpTaG91bGRGb2N1cyhQcmV2aW91c1RhYikNCglJbmZvU2VsZWN0b3I6UmVtb3ZlVGFiKFByZXZpb3VzVGFiKQ0KCVByZXZpb3VzU2VsZWN0YWJsZTpTZXRTZWxlY3RlZChmYWxzZSkNCg0KCS0tLy8gQ3JlYXRlIG5ldyB0YWINCglyZXR1cm4gVGFiRm9jdXNlZA0KZW5kDQoNCmZ1bmN0aW9uIFVpOk1ha2VUYWJsZUhlYWRlcnMoVGFibGUsIFJvd3M6IHRhYmxlKQ0KCWxvY2FsIEhlYWRlclJvdyA9IFRhYmxlOkhlYWRlclJvdygpDQoJZm9yIF8sIENhdGFnb3J5IGluIFJvd3MgZG8NCgkJbG9jYWwgQ29sdW1uID0gSGVhZGVyUm93Ok5leHRDb2x1bW4oKQ0KCQlDb2x1bW46TGFiZWwoe1RleHQ9Q2F0YWdvcnl9KQ0KCWVuZA0KZW5kDQoNCmZ1bmN0aW9uIFVpOkRlY29tcGlsZShFZGl0b3I6IHRhYmxlLCBTY3JpcHQ6IFNjcmlwdCkNCglsb2NhbCBIZWFkZXIgPSAiLS1CT09JSUlJIFRISVMgSVMgU08gVFVGRiBGTElQUFkgU0tJQklESSBBVVJBIChTSUdNQSBTUFkpIg0KCUVkaXRvcjpTZXRUZXh0KCItLeato+WcqOWPjee8luivkS4uLiArOTk5OTk5OSBBVVJBIChtYW5nbyBwaG9uaykiKQ0KDQoJLS0vLyBEZWNvbXBpbGUgc2NyaXB0DQoJbG9jYWwgRGVjb21waWxlZCwgSXNFcnJvciA9IFByb2Nlc3M6RGVjb21waWxlKFNjcmlwdCkNCg0KCS0tLy8gQWRkIGhlYWRlciBmb3Igc3VjY2Vzc2Z1bCBkZWNvbXBpbGF0aW9ucw0KCWlmIG5vdCBJc0Vycm9yIHRoZW4NCgkJRGVjb21waWxlZCA9IGB7SGVhZGVyfVxue0RlY29tcGlsZWR9YA0KCWVuZA0KDQoJRWRpdG9yOlNldFRleHQoRGVjb21waWxlZCkNCmVuZA0KDQp0eXBlIERpc3BsYXlUYWJsZUNvbmZpZyA9IHsNCglSb3dzOiB0YWJsZSwNCglGbGFnczogdGFibGU/LA0KCVRvRGlzcGxheTogdGFibGUsDQoJVGFibGU6IHRhYmxlDQp9DQpmdW5jdGlvbiBVaTpEaXNwbGF5VGFibGUoUGFyZW50LCBDb25maWc6IERpc3BsYXlUYWJsZUNvbmZpZyk6IHRhYmxlDQoJLS0vLyBDb25maWd1cmF0aW9uDQoJbG9jYWwgUm93cyA9IENvbmZpZy5Sb3dzDQoJbG9jYWwgRmxhZ3MgPSBDb25maWcuRmxhZ3MNCglsb2NhbCBEYXRhVGFibGUgPSBDb25maWcuVGFibGUNCglsb2NhbCBUb0Rpc3BsYXkgPSBDb25maWcuVG9EaXNwbGF5DQoNCglGbGFncy5NYXhDb2x1bW5zID0gI1Jvd3MNCg0KCS0tLy8gQ3JlYXRlIHRhYmxlDQoJbG9jYWwgVGFibGUgPSBQYXJlbnQ6VGFibGUoRmxhZ3MpDQoNCgktLS8vIFRhYmxlIGhlYWRlcnMNCglzZWxmOk1ha2VUYWJsZUhlYWRlcnMoVGFibGUsIFJvd3MpDQoNCgktLS8vIFRhYmxlIGxheW91dA0KCWZvciBSb3dJbmRleCwgTmFtZSBpbiBUb0Rpc3BsYXkgZG8NCgkJbG9jYWwgUm93ID0gVGFibGU6Um93KCkNCgkJDQoJCS0tLy8gQ3JlYXRlIENvbHVtbnMNCgkJZm9yIENvdW50LCBDYXRhZ29yeSBpbiBSb3dzIGRvDQoJCQlsb2NhbCBDb2x1bW4gPSBSb3c6TmV4dENvbHVtbigpDQoJCQkNCgkJCS0tLy8gVmFsdWUgdGV4dA0KCQkJbG9jYWwgVmFsdWUgPSBDYXRhZ29yeSA9PSAi5ZCN56ewIiBhbmQgTmFtZSBvciBEYXRhVGFibGVbTmFtZV0NCgkJCWlmIG5vdCBWYWx1ZSB0aGVuIGNvbnRpbnVlIGVuZA0KDQoJCQktLS8vIENyZWF0ZSBmaWx0ZXJlZCBsYWJlbA0KCQkJbG9jYWwgU3RyaW5nID0gc2VsZjpGaWx0ZXJOYW1lKGB7VmFsdWV9YCwgMTUwKQ0KCQkJQ29sdW1uOkxhYmVsKHtUZXh0PVN0cmluZ30pDQoJCWVuZA0KCWVuZA0KDQoJcmV0dXJuIFRhYmxlDQplbmQNCg0KZnVuY3Rpb24gVWk6U2V0Rm9jdXNlZFJlbW90ZShEYXRhKQ0KCS0tLy8gVW5wYWNrIHJlbW90ZSBkYXRhDQoJbG9jYWwgUmVtb3RlID0gRGF0YS5SZW1vdGUNCglsb2NhbCBNZXRob2QgPSBEYXRhLk1ldGhvZA0KCWxvY2FsIElzUmVjZWl2ZSA9IERhdGEuSXNSZWNlaXZlDQoJbG9jYWwgU2NyaXB0ID0gRGF0YS5DYWxsaW5nU2NyaXB0DQoJbG9jYWwgQ2xhc3NEYXRhID0gRGF0YS5DbGFzc0RhdGENCglsb2NhbCBIZWFkZXJEYXRhID0gRGF0YS5IZWFkZXJEYXRhDQoJbG9jYWwgVmFsdWVTd2FwcyA9IERhdGEuVmFsdWVTd2Fwcw0KCWxvY2FsIEFyZ3MgPSBEYXRhLkFyZ3MNCglsb2NhbCBJZCA9IERhdGEuSWQNCg0KCS0tLy8gRmxhZ3MNCglsb2NhbCBUYWJsZUFyZ3MgPSBGbGFnczpHZXRGbGFnVmFsdWUoIlRhYmxlQXJncyIpDQoJbG9jYWwgTm9WYXJpYWJsZXMgPSBGbGFnczpHZXRGbGFnVmFsdWUoIk5vVmFyaWFibGVzIikNCg0KCS0tLy8gVW5wYWNrIGluZm8NCglsb2NhbCBSZW1vdGVEYXRhID0gUHJvY2VzczpHZXRSZW1vdGVEYXRhKElkKQ0KCWxvY2FsIElzUmVtb3RlRnVuY3Rpb24gPSBDbGFzc0RhdGEuSXNSZW1vdGVGdW5jdGlvbg0KCWxvY2FsIFJlbW90ZU5hbWUgPSBzZWxmOkZpbHRlck5hbWUoYHtSZW1vdGV9YCwgNTApDQoNCgktLS8vIFVJIGRhdGENCglsb2NhbCBDb2RlRWRpdG9yID0gc2VsZi5Db2RlRWRpdG9yDQoJbG9jYWwgVG9EaXNwbGF5ID0gc2VsZi5EaXNwbGF5UmVtb3RlSW5mbw0KCWxvY2FsIEluZm9TZWxlY3RvciA9IHNlbGYuSW5mb1NlbGVjdG9yDQoNCglsb2NhbCBUYWJGb2N1c2VkID0gc2VsZjpSZW1vdmVQcmV2aW91c1RhYigpDQoJbG9jYWwgVGFiID0gSW5mb1NlbGVjdG9yOkNyZWF0ZVRhYih7DQoJCU5hbWUgPSBzZWxmOkZpbHRlck5hbWUoYOi/nOeoi+S6i+S7ti/lh73mlbDvvJp7UmVtb3RlTmFtZX1gLCA1MCksDQoJCUZvY3VzZWQgPSBUYWJGb2N1c2VkDQoJfSkNCg0KCS0tLy8gQ3JlYXRlIG5ldyBwYXJzZXINCglsb2NhbCBNb2R1bGUgPSBHZW5lcmF0aW9uOk5ld1BhcnNlcih7DQoJCU5vVmFyaWFibGVzID0gTm9WYXJpYWJsZXMNCgl9KQ0KCWxvY2FsIFBhcnNlciA9IE1vZHVsZS5QYXJzZXINCglsb2NhbCBGb3JtYXR0ZXIgPSBNb2R1bGUuRm9ybWF0dGVyDQoJRm9ybWF0dGVyOlNldFZhbHVlU3dhcHMoVmFsdWVTd2FwcykNCg0KCS0tLy8gU2V0IHRoaXMgbG9nIHRvIGJlIHNlbGVjdGVkDQoJQWN0aXZlRGF0YSA9IERhdGENCglEYXRhLlRhYiA9IFRhYg0KCURhdGEuU2VsZWN0YWJsZTpTZXRTZWxlY3RlZCh0cnVlKQ0KDQoJbG9jYWwgZnVuY3Rpb24gU2V0SURFVGV4dChDb250ZW50OiBzdHJpbmcsIFRhc2s6IHN0cmluZz8pDQoJCURhdGEuVGFzayA9IFRhc2sgb3IgIlNpZ21hIFNweSINCgkJQ29kZUVkaXRvcjpTZXRUZXh0KENvbnRlbnQpDQoJZW5kDQoJbG9jYWwgZnVuY3Rpb24gRGF0YUNvbm5lY3Rpb24oTmFtZSwgLi4uKQ0KCQlsb2NhbCBBcmdzID0gey4uLn0NCgkJcmV0dXJuIGZ1bmN0aW9uKCkNCgkJCXJldHVybiBEYXRhW05hbWVdKERhdGEsIFByb2Nlc3M6VW5wYWNrKEFyZ3MpKQ0KCQllbmQNCgllbmQNCglsb2NhbCBmdW5jdGlvbiBTY3JpcHRDaGVjayhTY3JpcHQsIE5vTWlzc2luZ0NoZWNrOiBib29sZWFuKTogYm9vbGVhbj8NCgkJLS0vLyBSZWplY3QgY2xpZW50IGV2ZW50cw0KCQlpZiBJc1JlY2VpdmUgdGhlbiANCgkJCVVpOlNob3dNb2RhbCh7DQoJCQkJIuaOpeaUtuS6i+S7tuayoeacieiEmuacrO+8jOWboOS4uuWug+aYr+S4gOS4qui/nuaOpSAoQ29ubmVjdGlvbikiDQoJCQl9KQ0KCQkJcmV0dXJuIA0KCQllbmQNCg0KCQktLS8vIENoZWNrIGlmIHNjcmlwdCBleGlzdHMNCgkJaWYgbm90IFNjcmlwdCBhbmQgbm90IE5vTWlzc2luZ0NoZWNrIHRoZW4gDQoJCQlVaTpTaG93TW9kYWwoeyLohJrmnKzlt7LooqvmuLjmiI/plIDmr4EgKC05OTk5OTk5IEFVUkEpIn0pDQoJCQlyZXR1cm4NCgkJZW5kDQoNCgkJcmV0dXJuIHRydWUNCgllbmQNCg0KCS0tLy8gRnVuY3Rpb25zDQoJZnVuY3Rpb24gRGF0YTpTY3JpcHRPcHRpb25zKEJ1dHRvbjogR3VpQnV0dG9uKQ0KCQlVaTpNYWtlQnV0dG9uTWVudShCdXR0b24sIHtzZWxmfSwgew0KCQkJWyLosIPnlKjogIXkv6Hmga8iXSA9IERhdGFDb25uZWN0aW9uKCJHZW5lcmF0ZUluZm8iKSwNCgkJCVsi5Y+N57yW6K+RIl0gPSBEYXRhQ29ubmVjdGlvbigiRGVjb21waWxlIiwgIlNvdXJjZVNjcmlwdCIpLA0KCQkJWyLlj43nvJbor5HosIPnlKjohJrmnKwiXSA9IERhdGFDb25uZWN0aW9uKCJEZWNvbXBpbGUiLCAiQ2FsbGluZ1NjcmlwdCIpLA0KCQkJWyLph43lpI3osIPnlKgiXSA9IERhdGFDb25uZWN0aW9uKCJSZXBlYXRDYWxsIiksDQoJCQlbIuS/neWtmOWtl+iKgueggSJdID0gRGF0YUNvbm5lY3Rpb24oIlNhdmVCeXRlY29kZSIpLA0KCQl9KQ0KCWVuZA0KCWZ1bmN0aW9uIERhdGE6QnVpbGRTY3JpcHQoQnV0dG9uOiBHdWlCdXR0b24pDQoJCVVpOk1ha2VCdXR0b25NZW51KEJ1dHRvbiwge3NlbGZ9LCB7DQoJCQlbIuS/neWtmCJdID0gRGF0YUNvbm5lY3Rpb24oIlNhdmVTY3JpcHQiKSwNCgkJCVsi6LCD55So6L+c56iL5LqL5Lu2L+WHveaVsCJdID0gRGF0YUNvbm5lY3Rpb24oIk1ha2VTY3JpcHQiLCAiUmVtb3RlIiksDQoJCQlbIuaLpuaIqui/nOeoi+S6i+S7ti/lh73mlbAiXSA9IERhdGFDb25uZWN0aW9uKCJNYWtlU2NyaXB0IiwgIkJsb2NrIiksDQoJCQlbIumHjeWkjeaJp+ihjO+8iEZvciDlvqrnjq/vvIkiXSA9IERhdGFDb25uZWN0aW9uKCJNYWtlU2NyaXB0IiwgIlJlcGVhdCIpLA0KCQkJWyLlnoPlnL7pgq7ku7blvI/osIPnlKjov5znqIvkuovku7Yv5Ye95pWwIl0gPSBEYXRhQ29ubmVjdGlvbigiTWFrZVNjcmlwdCIsICJTcGFtIikNCgkJfSkNCgllbmQNCglmdW5jdGlvbiBEYXRhOlNhdmVTY3JpcHQoKQ0KCQlsb2NhbCBGaWxlUGF0aCA9IEdlbmVyYXRpb246VGltZVN0YW1wRmlsZShzZWxmLlRhc2spDQoJCXdyaXRlZmlsZShGaWxlUGF0aCwgQ29kZUVkaXRvcjpHZXRUZXh0KCkpDQoNCgkJVWk6U2hvd01vZGFsKHsi6ISa5pys5bey5L+d5a2Y5YiwIiwgRmlsZVBhdGh9KQ0KCWVuZA0KCWZ1bmN0aW9uIERhdGE6U2F2ZUJ5dGVjb2RlKCkNCgkJLS0vLyBQcm9ibGVtIGNoZWNrDQoJCWlmIG5vdCBTY3JpcHRDaGVjayhTY3JpcHQsIHRydWUpIHRoZW4gcmV0dXJuIGVuZA0KDQoJCS0tLy8gZ2V0c2NyaXB0Ynl0ZWNvZGUNCiAgICAJbG9jYWwgU3VjY2VzcywgQnl0ZWNvZGUgPSBwY2FsbChnZXRzY3JpcHRieXRlY29kZSwgU2NyaXB0KQ0KCQlpZiBub3QgU3VjY2VzcyB0aGVuDQoJCQlVaTpTaG93TW9kYWwoeyLojrflj5bohJrmnKzlrZfoioLnoIHlpLHotKUgKC05OTk5OTk5IEFVUkEpIn0pDQoJCQlyZXR1cm4NCgkJZW5kDQoNCgkJLS0vLyBTYXZlIGZpbGUNCgkJbG9jYWwgUGF0aEJhc2UgPSBge1NjcmlwdH0gJXMudHh0YA0KCQlsb2NhbCBGaWxlUGF0aCA9IEdlbmVyYXRpb246VGltZVN0YW1wRmlsZShQYXRoQmFzZSkNCgkJd3JpdGVmaWxlKEZpbGVQYXRoLCBCeXRlY29kZSkNCg0KCQlVaTpTaG93TW9kYWwoeyLlrZfoioLnoIHlt7Lkv53lrZjliLAiLCBGaWxlUGF0aH0pDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpNYWtlU2NyaXB0KFNjcmlwdFR5cGU6IHN0cmluZykNCgkJbG9jYWwgU2NyaXB0ID0gR2VuZXJhdGlvbjpSZW1vdGVTY3JpcHQoTW9kdWxlLCBzZWxmLCBTY3JpcHRUeXBlKQ0KCQlTZXRJREVUZXh0KFNjcmlwdCwgYOato+WcqOe8lui+ke+8mntSZW1vdGVOYW1lfS5sdWFgKQ0KCWVuZA0KCWZ1bmN0aW9uIERhdGE6UmVwZWF0Q2FsbCgpDQoJCWxvY2FsIFNpZ25hbCA9IEhvb2s6SW5kZXgoUmVtb3RlLCBNZXRob2QpDQoNCgkJaWYgSXNSZWNlaXZlIHRoZW4NCgkJCWZpcmVzaWduYWwoU2lnbmFsLCBQcm9jZXNzOlVucGFjayhBcmdzKSkNCgkJZWxzZQ0KCQkJU2lnbmFsKFJlbW90ZSwgUHJvY2VzczpVbnBhY2soQXJncykpDQoJCWVuZA0KCWVuZA0KCWZ1bmN0aW9uIERhdGE6R2V0UmV0dXJuKCkNCgkJbG9jYWwgUmV0dXJuVmFsdWVzID0gc2VsZi5SZXR1cm5WYWx1ZXMNCg0KCQktLS8vIEVycm9yIG1lc3NhZ2VzDQoJCWlmIG5vdCBJc1JlbW90ZUZ1bmN0aW9uIHRoZW4NCgkJCVVpOlNob3dNb2RhbCh7IuatpOi/nOeoi+S6i+S7ti/lh73mlbDkuI3mmK8gUmVtb3RlIEZ1bmN0aW9uICgtOTk5OTk5OSBBVVJBKSJ9KQ0KCQkJcmV0dXJuDQoJCWVuZA0KCQlpZiBub3QgUmV0dXJuVmFsdWVzIHRoZW4NCgkJCVVpOlNob3dNb2RhbCh7Iuayoeaciei/lOWbnuWAvCAoLTk5OTk5OTkgQVVSQSkifSkNCgkJCXJldHVybg0KCQllbmQNCg0KCQktLS8vIEdlbmVyYXRlIHNjcmlwdA0KCQlsb2NhbCBTY3JpcHQgPSBHZW5lcmF0aW9uOlRhYmxlU2NyaXB0KE1vZHVsZSwgUmV0dXJuVmFsdWVzKQ0KCQlTZXRJREVUZXh0KFNjcmlwdCwgYOi/lOWbnuWAvO+8mntSZW1vdGVOYW1lfWApDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpHZW5lcmF0ZUluZm8oKQ0KCQktLS8vIFByb2JsZW0gY2hlY2sNCgkJaWYgbm90IFNjcmlwdENoZWNrKG5pbCwgdHJ1ZSkgdGhlbiByZXR1cm4gZW5kDQoNCgkJLS0vLyBHZW5lcmF0ZSBzY3JpcHQNCgkJbG9jYWwgU2NyaXB0ID0gR2VuZXJhdGlvbjpBZHZhbmNlZEluZm8oTW9kdWxlLCBzZWxmKQ0KCQlTZXRJREVUZXh0KFNjcmlwdCwgYOmrmOe6p+S/oeaBr++8mntSZW1vdGVOYW1lfWApDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpEZWNvbXBpbGUoV2hpY2hTY3JpcHQ6IHN0cmluZykNCgkJbG9jYWwgRGVjb21waWxlUG9wb3V0ID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJEZWNvbXBpbGVQb3BvdXQiKQ0KCQlsb2NhbCBUb0RlY29tcGlsZSA9IERhdGFbV2hpY2hTY3JpcHRdDQoJCWxvY2FsIEVkaXRvciA9IENvZGVFZGl0b3INCg0KCQktLS8vIFByb2JsZW0gY2hlY2sNCgkJaWYgbm90IFNjcmlwdENoZWNrKFRvRGVjb21waWxlLCB0cnVlKSB0aGVuIHJldHVybiBlbmQNCgkJbG9jYWwgVGFzayA9IFVpOkZpbHRlck5hbWUoYOato+WcqOafpeeci++8mntUb0RlY29tcGlsZX0ubHVhYCwgMjAwKQ0KCQkNCgkJLS0vLyBBdXRvbWF0aWNhbGx5IFBvcC1vdXQgdGhlIGVkaXRvciBmb3IgZGVjb21waWxpbmcgaWYgZW5hYmxlZA0KCQlpZiBEZWNvbXBpbGVQb3BvdXQgdGhlbg0KCQkJRWRpdG9yID0gVWk6TWFrZUVkaXRvclBvcG91dFdpbmRvdygiIiwgew0KCQkJCVRpdGxlID0gVGFzaw0KCQkJfSkNCgkJZW5kDQoNCgkJVWk6RGVjb21waWxlKEVkaXRvciwgVG9EZWNvbXBpbGUpDQoJZW5kDQoJDQoJLS0vLyBSZW1vdGVPcHRpb25zDQoJc2VsZjpDcmVhdGVPcHRpb25zRm9yRGljdChUYWIsIFJlbW90ZURhdGEsIGZ1bmN0aW9uKCkNCgkJUHJvY2VzczpVcGRhdGVSZW1vdGVEYXRhKElkLCBSZW1vdGVEYXRhKQ0KCWVuZCkNCg0KCS0tLy8gSW5zdGFuY2Ugb3B0aW9ucw0KCXNlbGY6Q3JlYXRlQnV0dG9ucyhUYWIsIHsNCgkJQmFzZSA9IHsNCgkJCVNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMjApLA0KCQkJQXV0b21hdGljU2l6ZSA9IEVudW0uQXV0b21hdGljU2l6ZS5ZLA0KCQl9LA0KCQlCdXR0b25zID0gew0KCQkJew0KCQkJCVRleHQgPSAi5aSN5Yi26ISa5pys6Lev5b6EIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJU2V0Q2xpcGJvYXJkKFBhcnNlcjpNYWtlUGF0aFN0cmluZyh7DQoJCQkJCQlPYmplY3QgPSBTY3JpcHQsDQoJCQkJCQlOb1ZhcmlhYmxlcyA9IHRydWUNCgkJCQkJfSkpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIuWkjeWItui/nOeoi+S6i+S7ti/lh73mlbDot6/lvoQiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlTZXRDbGlwYm9hcmQoUGFyc2VyOk1ha2VQYXRoU3RyaW5nKHsNCgkJCQkJCU9iamVjdCA9IFJlbW90ZSwNCgkJCQkJCU5vVmFyaWFibGVzID0gdHJ1ZQ0KCQkJCQl9KSkNCgkJCQllbmQsDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAi56e76Zmk5pel5b+XIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJSW5mb1NlbGVjdG9yOlJlbW92ZVRhYihUYWIpDQoJCQkJCURhdGEuU2VsZWN0YWJsZTpSZW1vdmUoKQ0KCQkJCQlIZWFkZXJEYXRhOlJlbW92ZSgpDQoJCQkJCUFjdGl2ZURhdGEgPSBuaWwNCgkJCQllbmQsDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAi5a+85Ye65pel5b+XIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJbG9jYWwgTG9ncyA9IEhlYWRlckRhdGEuRW50cmllcw0KCQkJCQlsb2NhbCBGaWxlUGF0aCA9IEdlbmVyYXRpb246RHVtcExvZ3MoTG9ncykNCgkJCQkJc2VsZjpTaG93TW9kYWwoeyLlr7zlh7rmlofku7blt7Lkv53lrZjliLAiLCBGaWxlUGF0aH0pDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIuafpeeci+i/nuaOpSIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCWxvY2FsIE1ldGhvZCA9IENsYXNzRGF0YS5SZWNlaXZlWzFdDQoJCQkJCWxvY2FsIFNpZ25hbCA9IFJlbW90ZVtNZXRob2RdDQoJCQkJCXNlbGY6Vmlld0Nvbm5lY3Rpb25zKFJlbW90ZU5hbWUsIFNpZ25hbCkNCgkJCQllbmQsDQoJCQl9DQoJCX0NCgl9KQ0KDQoJLS0vLyBSZW1vdGUgaW5mb3JtYXRpb24gdGFibGUNCglzZWxmOkRpc3BsYXlUYWJsZShUYWIsIHsNCgkJUm93cyA9IHsi5ZCN56ewIiwgIuWAvCJ9LA0KCQlUYWJsZSA9IERhdGEsDQoJCVRvRGlzcGxheSA9IFRvRGlzcGxheSwNCgkJRmxhZ3MgPSB7DQoJCQlCb3JkZXIgPSB0cnVlLA0KCQkJUm93QmFja2dyb3VuZCA9IHRydWUsDQoJCQlNYXhDb2x1bW5zID0gMg0KCQl9DQoJfSkNCgkNCgktLS8vIEFyZ3VtZW50cyB0YWJsZSBzY3JpcHQNCglpZiBUYWJsZUFyZ3MgdGhlbg0KCQlsb2NhbCBQYXJzZWQgPSBHZW5lcmF0aW9uOlRhYmxlU2NyaXB0KE1vZHVsZSwgQXJncykNCgkJU2V0SURFVGV4dChQYXJzZWQsIGDlj4LmlbDvvJp7UmVtb3RlTmFtZX1gKQ0KCQlyZXR1cm4NCgllbmQNCg0KCS0tLy8gUmVtb3RlIGNhbGwgc2NyaXB0DQoJRGF0YTpNYWtlU2NyaXB0KCJSZW1vdGUiKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlZpZXdDb25uZWN0aW9ucyhSZW1vdGVOYW1lOiBzdHJpbmcsIFNpZ25hbDogUkJYU2NyaXB0Q29ubmVjdGlvbikNCglsb2NhbCBXaW5kb3cgPSBzZWxmOkNyZWF0ZVdpbmRvdyh7DQoJCVRpdGxlID0gYOi/nuaOpe+8mntSZW1vdGVOYW1lfWAsDQoJCVNpemUgPSBVRGltMi5mcm9tT2Zmc2V0KDQ1MCwgMjUwKQ0KCX0pDQoNCglsb2NhbCBUb0Rpc3BsYXkgPSB7DQoJCSJFbmFibGVkIiwgLS0g5L+d5oyB6Iux5paH77yM6YCa5bi45Zyo5Luj56CB5LiK5LiL5paH5Lit5L2/55SoDQoJCSJMdWFDb25uZWN0aW9uIiwgLS0g5L+d5oyB6Iux5paH77yM6YCa5bi45Zyo5Luj56CB5LiK5LiL5paH5Lit5L2/55SoDQoJCSJTY3JpcHQiIC0tIOS/neaMgeiLseaWh++8jOmAmuW4uOWcqOS7o+eggeS4iuS4i+aWh+S4reS9v+eUqA0KCX0NCg0KCS0tLy8gR2V0IEZpbHRlcmVkIGNvbm5lY3Rpb25zDQoJbG9jYWwgQ29ubmVjdGlvbnMgPSBQcm9jZXNzOkZpbHRlckNvbm5lY3Rpb25zKFNpZ25hbCwgVG9EaXNwbGF5KQ0KDQoJLS0vLyBUYWJsZQ0KCWxvY2FsIFRhYmxlID0gV2luZG93OlRhYmxlKHsNCgkJQm9yZGVyID0gdHJ1ZSwNCgkJUm93QmFja2dyb3VuZCA9IHRydWUsDQoJCU1heENvbHVtbnMgPSAzDQoJfSkNCg0KCWxvY2FsIEJ1dHRvbnNGb3JWYWx1ZXMgPSB7DQoJCVsiU2NyaXB0Il0gPSBmdW5jdGlvbihSb3csIFZhbHVlKQ0KCQkJUm93OkJ1dHRvbih7DQoJCQkJVGV4dCA9ICLlj43nvJbor5EiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlsb2NhbCBUYXNrID0gc2VsZjpGaWx0ZXJOYW1lKGDmraPlnKjmn6XnnIvvvJp7VmFsdWV9Lmx1YWAsIDIwMCkNCgkJCQkJbG9jYWwgRWRpdG9yID0gc2VsZjpNYWtlRWRpdG9yUG9wb3V0V2luZG93KG5pbCwgew0KCQkJCQkJVGl0bGUgPSBUYXNrDQoJCQkJCX0pDQoJCQkJCXNlbGY6RGVjb21waWxlKEVkaXRvciwgVmFsdWUpDQoJCQkJZW5kDQoJCQl9KQ0KCQllbmQsDQoJCVsiRW5hYmxlZCJdID0gZnVuY3Rpb24oUm93LCBFbmFibGVkLCBDb25uZWN0aW9uKQ0KCQkJUm93OkJ1dHRvbih7DQoJCQkJVGV4dCA9IEVuYWJsZWQgYW5kICLnpoHnlKgiIG9yICLlkK/nlKgiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oc2VsZikNCgkJCQkJRW5hYmxlZCA9IG5vdCBFbmFibGVkDQoJCQkJCXNlbGYuVGV4dCA9IEVuYWJsZWQgYW5kICLnpoHnlKgiIG9yICLlkK/nlKgiDQoNCgkJCQkJLS0vLyBFbmFibGUgb3IgZGlzYWJsZSB0aGUgY29ubmVjdGlvbg0KCQkJCQlpZiBFbmFibGVkIHRoZW4NCgkJCQkJCUNvbm5lY3Rpb246RW5hYmxlKCkNCgkJCQkJZWxzZQ0KCQkJCQkJQ29ubmVjdGlvbjpEaXNhYmxlKCkNCgkJCQkJZW5kDQoJCQkJZW5kDQoJCQl9KQ0KCQllbmQNCgl9DQoNCgktLS8vIE1ha2UgaGVhZGVycyBvbiB0aGUgdGFibGUNCglzZWxmOk1ha2VUYWJsZUhlYWRlcnMoVGFibGUsIHsi5bey5ZCv55SoIiwgIkx1YSDov57mjqUiLCAi6ISa5pysIn0pDQoNCglmb3IgXywgQ29ubmVjdGlvbiBpbiBDb25uZWN0aW9ucyBkbw0KCQlsb2NhbCBSb3cgPSBUYWJsZTpSb3coKQ0KDQoJCWZvciBfLCBQcm9wZXJ0eSBpbiBUb0Rpc3BsYXkgZG8NCgkJCWxvY2FsIENvbHVtbiA9IFJvdzpOZXh0Q29sdW1uKCkNCgkJCWxvY2FsIENvbHVtblJvdyA9IENvbHVtbjpSb3coKQ0KDQoJCQlsb2NhbCBWYWx1ZSA9IENvbm5lY3Rpb25bUHJvcGVydHldDQoJCQlsb2NhbCBDYWxsYmFjayA9IEJ1dHRvbnNGb3JWYWx1ZXNbUHJvcGVydHldDQoNCgkJCS0tLy8gVmFsdWUgbGFiZWwNCgkJCUNvbHVtblJvdzpMYWJlbCh7VGV4dD1ge1ZhbHVlfWB9KQ0KDQoJCQktLS8vIEFkZCBidXR0b25zDQoJCQlpZiBDYWxsYmFjayB0aGVuDQoJCQkJQ2FsbGJhY2soQ29sdW1uUm93LCBWYWx1ZSwgQ29ubmVjdGlvbikNCgkJCWVuZA0KCQllbmQNCgllbmQNCg0KCS0tLy8gQ2VudGVyIFdpbmRvdw0KCVdpbmRvdzpDZW50ZXIoKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkdldFJlbW90ZUhlYWRlcihEYXRhOiBMb2cpDQoJbG9jYWwgTG9nTGltaXQgPSBzZWxmLkxvZ0xpbWl0DQoJbG9jYWwgTG9ncyA9IHNlbGYuTG9ncw0KCWxvY2FsIFJlbW90ZXNMaXN0ID0gc2VsZi5SZW1vdGVzTGlzdA0KDQoJLS0vLyBSZW1vdGUgaW5mbw0KCWxvY2FsIElkID0gRGF0YS5JZA0KCWxvY2FsIFJlbW90ZSA9IERhdGEuUmVtb3RlDQoJbG9jYWwgUmVtb3RlTmFtZSA9IHNlbGY6RmlsdGVyTmFtZShge1JlbW90ZX1gLCAzMCkNCg0KCS0tLy8gTm9UcmVlTm9kZXMNCglsb2NhbCBOb1RyZWVOb2RlcyA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiTm9UcmVlTm9kZXMiKQ0KDQoJLS0vLyBDaGVjayBmb3IgZXhpc3RpbmcgVHJlZU5vZGUNCglsb2NhbCBFeGlzdGluZyA9IExvZ3NbSWRdDQoJaWYgRXhpc3RpbmcgdGhlbiByZXR1cm4gRXhpc3RpbmcgZW5kDQoNCgktLS8vIEhlYWRlciBkYXRhDQoJbG9jYWwgSGVhZGVyRGF0YSA9IHsJDQoJCUxvZ0NvdW50ID0gMCwNCgkJRGF0YSA9IERhdGEsDQoJCUVudHJpZXMgPSB7fQ0KCX0NCg0KCS0tLy8gSW5jcmVtZW50IHRyZWVub2RlIGNvdW50DQoJUmVtb3Rlc0NvdW50ICs9IDENCg0KCS0tLy8gQ3JlYXRlIG5ldyB0cmVlbm9kZSBlbGVtZW50DQoJaWYgbm90IE5vVHJlZU5vZGVzIHRoZW4NCgkJSGVhZGVyRGF0YS5UcmVlTm9kZSA9IFJlbW90ZXNMaXN0OlRyZWVOb2RlKHsNCgkJCUxheW91dE9yZGVyID0gLTEgKiBSZW1vdGVzQ291bnQsDQoJCQlUaXRsZSA9IFJlbW90ZU5hbWUNCgkJfSkNCgllbmQNCg0KCWZ1bmN0aW9uIEhlYWRlckRhdGE6Q2hlY2tMaW1pdCgpDQoJCWxvY2FsIEVudHJpZXMgPSBzZWxmLkVudHJpZXMNCgkJaWYgI0VudHJpZXMgPCBMb2dMaW1pdCB0aGVuIHJldHVybiBlbmQNCgkJCQ0KCQktLS8vIEdldCBhbmQgcmVtb3ZlIGxhc3QgZWxlbWVudA0KCQlsb2NhbCBMb2cgPSB0YWJsZS5yZW1vdmUoRW50cmllcywgMSkNCgkJTG9nLlNlbGVjdGFibGU6UmVtb3ZlKCkNCgllbmQNCg0KCWZ1bmN0aW9uIEhlYWRlckRhdGE6TG9nQWRkZWQoRGF0YSkNCgkJLS0vLyBJbmNyZW1lbnQgbG9nIGNvdW50DQoJCXNlbGYuTG9nQ291bnQgKz0gMQ0KCQlzZWxmOkNoZWNrTGltaXQoKQ0KDQoJCS0tLy8gQWRkIGVudHJ5DQoJCWxvY2FsIEVudHJpZXMgPSBzZWxmLkVudHJpZXMNCgkJdGFibGUuaW5zZXJ0KEVudHJpZXMsIERhdGEpDQoJCQ0KCQlyZXR1cm4gc2VsZg0KCWVuZA0KDQoJZnVuY3Rpb24gSGVhZGVyRGF0YTpSZW1vdmUoKQ0KCQktLS8vIFJlbW92ZSBUcmVlTm9kZQ0KCQlsb2NhbCBUcmVlTm9kZSA9IHNlbGYuVHJlZU5vZGUNCgkJaWYgVHJlZU5vZGUgdGhlbg0KCQkJVHJlZU5vZGU6UmVtb3ZlKCkNCgkJZW5kDQoNCgkJLS0vLyBDbGVhciB0YWJsZXMgZnJvbSBtZW1vcnkNCgkJTG9nc1tJZF0gPSBuaWwNCgkJdGFibGUuY2xlYXIoSGVhZGVyRGF0YSkNCgllbmQNCg0KCUxvZ3NbSWRdID0gSGVhZGVyRGF0YQ0KCXJldHVybiBIZWFkZXJEYXRhDQplbmQNCg0KZnVuY3Rpb24gVWk6Q2xlYXJMb2dzKCkNCglsb2NhbCBMb2dzID0gc2VsZi5Mb2dzDQoJbG9jYWwgUmVtb3Rlc0xpc3QgPSBzZWxmLlJlbW90ZXNMaXN0DQoNCgktLS8vIENsZWFyIGFsbCBlbGVtZW50cw0KCVJlbW90ZXNDb3VudCA9IDANCglSZW1vdGVzTGlzdDpDbGVhckNoaWxkRWxlbWVudHMoKQ0KDQoJLS0vLyBDbGVhciBsb2dzIGZyb20gbWVtb3J5DQoJdGFibGUuY2xlYXIoTG9ncykNCmVuZA0KDQpmdW5jdGlvbiBVaTpRdWV1ZUxvZyhEYXRhKQ0KCWxvY2FsIExvZ1F1ZXVlID0gc2VsZi5Mb2dRdWV1ZQ0KCVByb2Nlc3M6TWVyZ2UoRGF0YSwgew0KCQlBcmdzID0gUHJvY2VzczpEZWVwQ2xvbmVUYWJsZShEYXRhLkFyZ3MpLA0KCX0pDQoNCglpZiBEYXRhLlJldHVyblZhbHVlcyB0aGVuDQogICAgICAgIERhdGEuUmV0dXJuVmFsdWVzID0gUHJvY2VzczpEZWVwQ2xvbmVUYWJsZShEYXRhLlJldHVyblZhbHVlcykNCiAgICBlbmQNCgkNCiAgICB0YWJsZS5pbnNlcnQoTG9nUXVldWUsIERhdGEpDQplbmQNCg0KZnVuY3Rpb24gVWk6UHJvY2Vzc0xvZ1F1ZXVlKCkNCglsb2NhbCBRdWV1ZSA9IHNlbGYuTG9nUXVldWUNCiAgICBpZiAjUXVldWUgPD0gMCB0aGVuIHJldHVybiBlbmQNCg0KCS0tLy8gQ3JlYXRlIGEgbG9nIGVsZW1lbnQgZm9yIGVhY2ggaW4gdGhlIFF1ZXVlDQogICAgZm9yIEluZGV4LCBEYXRhIGluIG5leHQsIFF1ZXVlIGRvDQogICAgICAgIHNlbGY6Q3JlYXRlTG9nKERhdGEpDQogICAgICAgIHRhYmxlLnJlbW92ZShRdWV1ZSwgSW5kZXgpDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gVWk6QmVnaW5Mb2dTZXJ2aWNlKCkNCgljb3JvdXRpbmUud3JhcChmdW5jdGlvbigpDQoJCXdoaWxlIHRydWUgZG8NCgkJCXNlbGY6UHJvY2Vzc0xvZ1F1ZXVlKCkNCgkJCXRhc2sud2FpdCgpDQoJCWVuZA0KCWVuZCkoKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkZpbHRlck5hbWUoTmFtZTogc3RyaW5nLCBDaGFyYWN0ZXJMaW1pdDogbnVtYmVyPyk6IHN0cmluZw0KCWxvY2FsIFRyaW1tZWQgPSBOYW1lOnN1YigxLCBDaGFyYWN0ZXJMaW1pdCBvciAyMCkNCglsb2NhbCBGaWx0cmVkID0gVHJpbW1lZDpnc3ViKCJbXG5ccl0iLCAiIikNCglGaWx0cmVkID0gR2VuZXJhdGlvbjpNYWtlUHJpbnRhYmxlKEZpbHRyZWQpDQoNCglyZXR1cm4gRmlsdHJlZA0KZW5kDQoNCmZ1bmN0aW9uIFVpOkNyZWF0ZUxvZyhEYXRhOiBMb2cpDQoJLS0vLyBVbnBhY2sgbG9nIGRhdGENCiAgICBsb2NhbCBSZW1vdGUgPSBEYXRhLlJlbW90ZQ0KCWxvY2FsIE1ldGhvZCA9IERhdGEuTWV0aG9kDQogICAgbG9jYWwgQXJncyA9IERhdGEuQXJncw0KICAgIGxvY2FsIElzUmVjZWl2ZSA9IERhdGEuSXNSZWNlaXZlDQoJbG9jYWwgSWQgPSBEYXRhLklkDQoJbG9jYWwgVGltZXN0YW1wID0gRGF0YS5UaW1lc3RhbXANCglsb2NhbCBJc0V4cGxvaXQgPSBEYXRhLklzRXhwbG9pdA0KCQ0KCWxvY2FsIElzTmlsUGFyZW50ID0gSG9vazpJbmRleChSZW1vdGUsICJQYXJlbnQiKSA9PSBuaWwNCglsb2NhbCBSZW1vdGVEYXRhID0gUHJvY2VzczpHZXRSZW1vdGVEYXRhKElkKQ0KDQoJLS0vLyBQYXVzZWQNCglsb2NhbCBQYXVzZWQgPSBGbGFnczpHZXRGbGFnVmFsdWUoIlBhdXNlZCIpDQoJaWYgUGF1c2VkIHRoZW4gcmV0dXJuIGVuZA0KDQoJLS0vLyBDaGVjayBjYWxsZXIgKElnbm9yZSBleHBsb2l0IGNhbGxzKQ0KCWxvY2FsIExvZ0V4cGxvaXQgPSBGbGFnczpHZXRGbGFnVmFsdWUoIkxvZ0V4cGxvaXQiKQ0KCWlmIG5vdCBMb2dFeHBsb2l0IGFuZCBJc0V4cGxvaXQgdGhlbiByZXR1cm4gZW5kDQoNCgktLS8vIElnbm9yZU5pbA0KCWxvY2FsIElnbm9yZU5pbCA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiSWdub3JlTmlsIikNCglpZiBJZ25vcmVOaWwgYW5kIElzTmlsUGFyZW50IHRoZW4gcmV0dXJuIGVuZA0KDQogICAgLS0vLyBMb2dSZWNpdmVzIGNoZWNrDQoJbG9jYWwgTG9nUmVjaXZlcyA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiTG9nUmVjaXZlcyIpDQoJaWYgbm90IExvZ1JlY2l2ZXMgYW5kIElzUmVjZWl2ZSB0aGVuIHJldHVybiBlbmQNCg0KICAgIC0tLy8gRXhjbHVkZWQgY2hlY2sNCiAgICBpZiBSZW1vdGVEYXRhLkV4Y2x1ZGVkIHRoZW4gcmV0dXJuIGVuZA0KDQoJLS0vLyBEZXNlcmlhbGl6ZSBhcmd1bWVudHMNCglBcmdzID0gQ29tbXVuaWNhdGlvbjpEZXNlcmlhbGl6ZVRhYmxlKEFyZ3MpDQoNCgktLS8vIERlZXAgY2xvbmUgZGF0YQ0KCWxvY2FsIENsb25lZEFyZ3MgPSBQcm9jZXNzOkRlZXBDbG9uZVRhYmxlKEFyZ3MpDQoJRGF0YS5BcmdzID0gQ2xvbmVkQXJncw0KCURhdGEuVmFsdWVTd2FwcyA9IEdlbmVyYXRpb246TWFrZVZhbHVlU3dhcHNUYWJsZShUaW1lc3RhbXApDQoNCgktLS8vIEdlbmVyYXRlIGxvZyB0aXRsZQ0KCWxvY2FsIENvbG9yID0gQ29uZmlnLk1ldGhvZENvbG9yc1tNZXRob2Q6bG93ZXIoKV0NCglsb2NhbCBUZXh0ID0gTm9UcmVlTm9kZXMgYW5kIGB7UmVtb3RlfSB8IHtNZXRob2R9YCBvciBNZXRob2QNCg0KCS0tLy8gRmluZFN0cmluZ0Zvck5hbWUgY2hlY2sNCglsb2NhbCBGaW5kU3RyaW5nID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJGaW5kU3RyaW5nRm9yTmFtZSIpDQoJaWYgRmluZFN0cmluZyB0aGVuDQoJCWZvciBfLCBBcmcgaW4gbmV4dCwgQ2xvbmVkQXJncyBkbw0KCQkJaWYgdHlwZW9mKEFyZykgPT0gInN0cmluZyIgdGhlbg0KCQkJCWxvY2FsIEZpbHRyZWQgPSBzZWxmOkZpbHRlck5hbWUoQXJnKQ0KCQkJCVRleHQgPSBge0ZpbHRyZWR9IHwge1RleHR9YA0KCQkJCWJyZWFrDQoJCQllbmQNCgkJZW5kDQoJZW5kDQoNCgktLS8vIEZldGNoIEhlYWRlckRhdGEgYnkgdGhlIFJlbW90ZUlEIHVzZWQgZm9yIHN0YWNraW5nDQoJbG9jYWwgSGVhZGVyID0gc2VsZjpHZXRSZW1vdGVIZWFkZXIoRGF0YSkNCglsb2NhbCBSZW1vdGVzTGlzdCA9IHNlbGYuUmVtb3Rlc0xpc3QNCg0KCWxvY2FsIExvZ0NvdW50ID0gSGVhZGVyLkxvZ0NvdW50DQoJbG9jYWwgVHJlZU5vZGUgPSBIZWFkZXIuVHJlZU5vZGUgDQoJbG9jYWwgUGFyZW50ID0gVHJlZU5vZGUgb3IgUmVtb3Rlc0xpc3QNCg0KCS0tLy8gSW5jcmVhc2UgbG9nIGNvdW50IC0gVHJlZU5vZGVzIGFyZSBpbiBHZXRSZW1vdGVIZWFkZXIgZnVuY3Rpb24NCglpZiBOb1RyZWVOb2RlcyB0aGVuDQoJCVJlbW90ZXNDb3VudCArPSAxDQoJCUxvZ0NvdW50ID0gUmVtb3Rlc0NvdW50DQoJZW5kDQoNCiAgICAtLS8vIENyZWF0ZSBmb2N1cyBidXR0b24NCglEYXRhLkhlYWRlckRhdGEgPSBIZWFkZXINCglEYXRhLlNlbGVjdGFibGUgPSBQYXJlbnQ6U2VsZWN0YWJsZSh7DQoJCVRleHQgPSBUZXh0LA0KICAgICAgICBMYXlvdXRPcmRlciA9IC0xICogTG9nQ291bnQsDQoJCVRleHRDb2xvcjMgPSBDb2xvciwNCgkJVGV4dFhBbGlnbm1lbnQgPSBFbnVtLlRleHRYQWxpZ25tZW50LkxlZnQsDQoJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJc2VsZjpTZXRGb2N1c2VkUmVtb3RlKERhdGEpDQoJCWVuZCwNCiAgICB9KQ0KDQoJSGVhZGVyOkxvZ0FkZGVkKERhdGEpDQoNCgktLS8vIEF1dG8gc2VsZWN0IGNoZWNrDQoJbG9jYWwgU2VsZWN0TmV3ZXN0ID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJTZWxlY3ROZXdlc3QiKQ0KCWxvY2FsIEdyb3VwU2VsZWN0ZWQgPSBBY3RpdmVEYXRhIGFuZCBBY3RpdmVEYXRhLkhlYWRlckRhdGEgPT0gSGVhZGVyDQoJaWYgU2VsZWN0TmV3ZXN0IGFuZCBHcm91cFNlbGVjdGVkIHRoZW4NCgkJc2VsZjpTZXRGb2N1c2VkUmVtb3RlKERhdGEpDQoJZW5kDQplbmQNCg0KcmV0dXJuIFVp]]
},Generation={'base64',
[[]]
},Communication={'base64',
[[]]
}},d.Players local i=e:LoadLibraries(g)local j,k,l,m,n,o,p=i.Process,i.Hook,i.Ui
,i.Generation,i.Communication,i.Config,e:GetAsset('ProggyClean.ttf',true)local q
=e:CreateFont('ProggyClean',p)l:SetFontFile(q)j:CheckConfig(o)e:LoadModules(i,{
Modules=i,Services=d})local r,s=l:CreateMainWindow(),j:CheckIsSupported()if not
s then r:Close()return end local t,u=n:CreateChannel()n:AddCommCallback(
'QueueLog',function(...)l:QueueLog(...)end)n:AddCommCallback('Print',function(
...)l:ConsoleLog(...)end)local v=h.LocalPlayer m:SetSwapsCallback(function(w)w:
AddSwap(v,{String='LocalPlayer'})w:AddSwap(v.Character,{String='Character',
NextParent=v})end)l:CreateWindowContent(r)l:SetCommChannel(u)l:BeginLogService()
local w=e:MakeActorScript(g,t)k:LoadHooks(w,t)local x=l:AskUser{Title=
'\u{542f}\u{7528}\u{51fd}\u{6570}\u{8865}\u{4e01}\u{ff1f}',Content={
'\u{5728}\u{67d0}\u{4e9b}\u{6267}\u{884c}\u{5668}\u{4e0a}\u{ff0c}\u{51fd}\u{6570}\u{8865}\u{4e01}\u{53ef}\u{4ee5}\u{9632}\u{6b62}\u{5e38}\u{89c1}\u{7684}\u{6267}\u{884c}\u{5668}\u{68c0}\u{6d4b}'
,
'\u{542f}\u{7528}\u{6b64}\u{529f}\u{80fd}\u{53ef}\u{80fd}\u{4f1a}\u{5728}\u{67d0}\u{4e9b}\u{6e38}\u{620f}\u{4e2d}\u{89e6}\u{53d1}\u{94a9}\u{5b50}\u{68c0}\u{6d4b}\u{ff0c}\u{56e0}\u{6b64}\u{9700}\u{8981}\u{8be2}\u{95ee}'
,
"\u{5982}\u{679c}\u{65e0}\u{6548}\u{ff0c}\u{8bf7}\u{91cd}\u{65b0}\u{52a0}\u{5165}\u{6e38}\u{620f}\u{5e76}\u{9009}\u{62e9}'\u{5426}'"
,'','(\u{4e0d}\u{5f71}\u{54cd}\u{6e38}\u{620f}\u{529f}\u{80fd})'},Options={
'\u{662f}','\u{5426}'}}=='\u{662f}'u:Fire('BeginHooks',{PatchFunctions=x})