--[[
	⣿⣿⣿⣿⣿ SIGMA SPY ⣿⣿⣿⣿⣿
	⣿⣿⣯⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉
	⠉⠻⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠈⠻⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠙⢿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠀⠀⣉⣿⣿⣿⠆⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⣠⣾⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⢀⣴⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣀⣴⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣿⣿⣟⣁⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀
	⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿

	@author depso (depthso)
	@repo https://github.com/depthso
	@license MIT
	@description Sigma Remote Spy for Roblox
    @wynsbssb Chinese
	This file is COMPILED, check /src folder for the source
	Build scripts are available in /build
]]

local a,b={UseWorkspace=false,NoActors=false,FolderName='Sigma Spy',RepoUrl=
[[https://raw.githubusercontent.com/depthso/Sigma-Spy/refs/heads/main]],
ParserUrl=
[[https://raw.githubusercontent.com/depthso/Roblox-parser/refs/heads/main/dist/Main.luau]]
},{...}local c=b[1]if typeof(c)=='table'then for d,e in c do a[d]=e end end
local d=setmetatable({},{__index=function(d,e)local f=game:GetService(e)return
cloneref(f)end})local e=(function()local e,f={UseWorkspace=false,Folder=
'Sigma spy',RepoUrl=nil,FolderStructure={['Sigma Spy']={'assets'}}}function e:
Init(g)local h,i=self.FolderStructure,g.Services f=i.HttpService self:
CheckFolders(h)end function e:PushConfig(g)for h,i in next,g do self[h]=i end
end function e:UrlFetch(g)local h={Url=g:gsub(' ','%%20'),Method='GET'}local i,j
=pcall(request,h)if not i then warn
'[!] HTTP \u{8bf7}\u{6c42}\u{51fa}\u{9519}\u{ff01}\u{8bf7}\u{68c0}\u{67e5}\u{63a7}\u{5236}\u{53f0} (F9)'
warn('> \u{94fe}\u{63a5}:',g)error(j)return''end local k,l=j.Body,j.StatusCode
if l==404 then warn
'[!] \u{8bf7}\u{6c42}\u{7684}\u{6587}\u{4ef6}\u{5df2}\u{79fb}\u{52a8}\u{6216}\u{88ab}\u{5220}\u{9664}\u{3002}'
warn(' >',g)return''end return k,j end function e:MakePath(g)local h=self.Folder
return`{h}/{g}`end function e:LoadCustomasset(g)if not getcustomasset then
return end if not g then return end local h=readfile(g)if#h<=0 then return end
local i,j=pcall(getcustomasset,g)if not i then return end if not j or#j<=0 then
return end return j end function e:GetFile(g,h)local i,j,k,l=self.RepoUrl,self.
UseWorkspace,self:MakePath(g),''if j then l=readfile(k)else l=self:UrlFetch(`{i}/{
g}`)end if h then self:FileCheck(k,function()return l end)return self:
LoadCustomasset(k)end return l end function e:GetTemplate(g)return self:GetFile(
`templates/{g}.lua`)end function e:FileCheck(g,h)if isfile(g)then return end
local i=h()writefile(g,i)end function e:FolderCheck(g)if isfolder(g)then return
end makefolder(g)end function e:CheckPath(g,h)return g and`{g}/{h}`or h end
function e:CheckFolders(g,h)for i,j in next,g do if typeof(j)=='table'then local
k=self:CheckPath(h,i)self:FolderCheck(k)self:CheckFolders(j,k)continue end local
k=self:CheckPath(h,j)self:FolderCheck(k)end end function e:TemplateCheck(g,h)
self:FileCheck(g,function()return self:GetTemplate(h)end)end function e:GetAsset
(g,h)return self:GetFile(`assets/{g}`,h)end function e:GetModule(g,h)local i=`{g
}.lua`if h then self:TemplateCheck(i,h)local j=readfile(i)local k=loadstring(j)
if k then return j end return self:GetTemplate(h)end return self:GetFile(i)end
function e:LoadLibraries(g,...)local h={}for i,j in next,g do local k=typeof(j)
=='table'and j[1]=='base64'j=k and j[2]or j if typeof(j)~='string'and not k then
h[i]=j continue end if k then j=crypt.base64decode(j)g[i]=j end local l,m=
loadstring(j,i)assert(l,`\229\138\160\232\189\189 {i} \229\164\177\232\180\165: {
m}`)h[i]=l(...)end return h end function e:LoadModules(g,h)for i,j in next,g do
local k=j.Init if not k then continue end j:Init(h)end end function e:CreateFont
(g,h)if not h then return end local i=`assets/{g}.json`local j,k=self:MakePath(i
),{name=g,faces={{name='Regular',weight=400,style='Normal',assetId=h}}}local l=f
:JSONEncode(k)writefile(j,l)return j end function e:CompileModule(g)local h=
'local Libraries = {'for i,j in g do if typeof(j)~='string'then continue end h
..=`\t{i} = (function()\n{j}\nend)(),\n`end h..='}'return h end function e:
MakeActorScript(g,h)local i=e:CompileModule(g)i..=
'\r\n\tlocal ExtraData = {\r\n\t\tIsActor = true\r\n\t}\r\n\t'i..=`Libraries.Hook:BeginService(Libraries, ExtraData, {
h})`return i end return e end)()e:PushConfig(a)e:Init{Services=d}local f=e.
FolderName local g,h={Config=e:GetModule(`{f}/Config`,'Config'),ReturnSpoofs=e:
GetModule(`{f}/Return spoofs`,'\u{8fd4}\u{56de}\u{503c}\u{6b3a}\u{9a97}'),
Configuration=a,Files=e,Process={'base64',
[[]]
},Hook={'base64',
[[]]
},Flags={'base64',
[[dHlwZSBGbGFnVmFsdWUgPSBib29sZWFufG51bWJlcnxhbnkNCnR5cGUgRmxhZyA9IHsNCiAgICBWYWx1ZTogRmxhZ1ZhbHVlLA0KICAgIExhYmVsOiBzdHJpbmcsDQogICAgQ2F0ZWdvcnk6IHN0cmluZw0KfQ0KdHlwZSBGbGFncyA9IHsNCiAgICBbc3RyaW5nXTogRmxhZw0KfQ0KdHlwZSB0YWJsZSA9IHsNCiAgICBbYW55XTogYW55DQp9DQoNCmxvY2FsIE1vZHVsZSA9IHsNCiAgICBGbGFncyA9IHsNCiAgICAgICAgLS0gUHJldmVudFJlbmFtaW5nID0gew0KICAgICAgICAtLSAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgLS0gICAgIExhYmVsID0gIuemgeatoumHjeWRveWQjSIsDQogICAgICAgIC0tIH0sDQogICAgICAgIC0tIFByZXZlbnRQYXJlbnRpbmcgPSB7DQogICAgICAgIC0tICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAtLSAgICAgTGFiZWwgPSAi56aB5q2i6K6+572u54i257qnIiwNCiAgICAgICAgLS0gfSwNCiAgICAgICAgTm9Db21tZW50cyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICLml6Dms6jph4oiLA0KICAgICAgICB9LA0KICAgICAgICBTZWxlY3ROZXdlc3QgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAi6Ieq5Yqo6YCJ5oup5pyA5pawIiwNCiAgICAgICAgfSwNCiAgICAgICAgRGVjb21waWxlUG9wb3V0ID0geyAtLSBMb3ZyZSBTSFVTSA0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIuWPjee8luivkeW8ueWHuueql+WPoyIsDQogICAgICAgIH0sDQogICAgICAgIElnbm9yZU5pbCA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIuW/veeVpeepuueItue6pyIsDQogICAgICAgIH0sDQogICAgICAgIExvZ0V4cGxvaXQgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICLorrDlvZUgRXhwbG9pdCDosIPnlKgiLA0KICAgICAgICB9LA0KICAgICAgICBMb2dSZWNpdmVzID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAi6K6w5b2V5o6l5pS2IiwNCiAgICAgICAgfSwNCiAgICAgICAgUGF1c2VkID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIuaaguWBnCIsDQogICAgICAgICAgICBLZXliaW5kID0gRW51bS5LZXlDb2RlLlENCiAgICAgICAgfSwNCiAgICAgICAgS2V5YmluZHNFbmFibGVkID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAi5ZCv55So5b+r5o236ZSuIg0KICAgICAgICB9LA0KICAgICAgICBGaW5kU3RyaW5nRm9yTmFtZSA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIuafpeaJvuWPguaVsOWvueW6lOWQjeensCINCiAgICAgICAgfSwNCiAgICAgICAgVWlWaXNpYmxlID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAi55WM6Z2i5Y+v6KeBIiwNCiAgICAgICAgICAgIEtleWJpbmQgPSBFbnVtLktleUNvZGUuUA0KICAgICAgICB9LA0KICAgICAgICBOb1RyZWVOb2RlcyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICLml6DliIbnu4QiDQogICAgICAgIH0sDQogICAgICAgIFRhYmxlQXJncyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICLooajlj4LmlbAiDQogICAgICAgIH0sDQogICAgICAgIE5vVmFyaWFibGVzID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIuaXoOWPmOmHj+WOi+e8qSINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gTW9kdWxlOkdldEZsYWdWYWx1ZShOYW1lOiBzdHJpbmcpOiBGbGFnVmFsdWUNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgcmV0dXJuIEZsYWcuVmFsdWUNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6U2V0RmxhZ1ZhbHVlKE5hbWU6IHN0cmluZywgVmFsdWU6IEZsYWdWYWx1ZSkNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgRmxhZy5WYWx1ZSA9IFZhbHVlDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlNldEZsYWdDYWxsYmFjayhOYW1lOiBzdHJpbmcsIENhbGxiYWNrOiAoLi4uYW55KSAtPiAuLi5hbnkpDQogICAgbG9jYWwgRmxhZyA9IHNlbGY6R2V0RmxhZyhOYW1lKQ0KICAgIEZsYWcuQ2FsbGJhY2sgPSBDYWxsYmFjaw0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpTZXRGbGFnQ2FsbGJhY2tzKERpY3Q6IHt9KQ0KICAgIGZvciBOYW1lLCBDYWxsYmFjazogKC4uLmFueSkgLT4gLi4uYW55IGluIG5leHQsIERpY3QgZG8gDQogICAgICAgIHNlbGY6U2V0RmxhZ0NhbGxiYWNrKE5hbWUsIENhbGxiYWNrKQ0KICAgIGVuZA0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpHZXRGbGFnKE5hbWU6IHN0cmluZyk6IEZsYWcNCiAgICBsb2NhbCBBbGxGbGFncyA9IHNlbGY6R2V0RmxhZ3MoKQ0KICAgIGxvY2FsIEZsYWcgPSBBbGxGbGFnc1tOYW1lXQ0KICAgIGFzc2VydChGbGFnLCAi5qCH5b+X5LiN5a2Y5Zyo77yBIikNCiAgICByZXR1cm4gRmxhZw0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpBZGRGbGFnKE5hbWU6IHN0cmluZywgRmxhZzogRmxhZykNCiAgICBsb2NhbCBBbGxGbGFncyA9IHNlbGY6R2V0RmxhZ3MoKQ0KICAgIEFsbEZsYWdzW05hbWVdID0gRmxhZw0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpHZXRGbGFncygpOiBGbGFncw0KICAgIHJldHVybiBzZWxmLkZsYWdzDQplbmQNCg0KcmV0dXJuIE1vZHVsZQ0K]]
},Ui={'base64',
[[]]
},Generation={'base64',
[[]]
},Communication={'base64',
[[]]
}},d.Players local i=e:LoadLibraries(g)local j,k,l,m,n,o,p=i.Process,i.Hook,i.Ui
,i.Generation,i.Communication,i.Config,e:GetAsset('ProggyClean.ttf',true)local q
=e:CreateFont('ProggyClean',p)l:SetFontFile(q)j:CheckConfig(o)e:LoadModules(i,{
Modules=i,Services=d})local r,s=l:CreateMainWindow(),j:CheckIsSupported()if not
s then r:Close()return end local t,u=n:CreateChannel()n:AddCommCallback(
'QueueLog',function(...)l:QueueLog(...)end)n:AddCommCallback('Print',function(
...)l:ConsoleLog(...)end)local v=h.LocalPlayer m:SetSwapsCallback(function(w)w:
AddSwap(v,{String='LocalPlayer'})w:AddSwap(v.Character,{String='Character',
NextParent=v})end)l:CreateWindowContent(r)l:SetCommChannel(u)l:BeginLogService()
local w=e:MakeActorScript(g,t)k:LoadHooks(w,t)local x=l:AskUser{Title=
'\u{542f}\u{7528}\u{51fd}\u{6570}\u{8865}\u{4e01}\u{ff1f}',Content={
'\u{5728}\u{67d0}\u{4e9b}\u{6267}\u{884c}\u{5668}\u{4e0a}\u{ff0c}\u{51fd}\u{6570}\u{8865}\u{4e01}\u{53ef}\u{4ee5}\u{9632}\u{6b62}\u{5e38}\u{89c1}\u{7684}\u{6267}\u{884c}\u{5668}\u{68c0}\u{6d4b}'
,
'\u{542f}\u{7528}\u{6b64}\u{529f}\u{80fd}\u{53ef}\u{80fd}\u{4f1a}\u{5728}\u{67d0}\u{4e9b}\u{6e38}\u{620f}\u{4e2d}\u{89e6}\u{53d1}\u{94a9}\u{5b50}\u{68c0}\u{6d4b}\u{ff0c}\u{56e0}\u{6b64}\u{9700}\u{8981}\u{8be2}\u{95ee}'
,
"\u{5982}\u{679c}\u{65e0}\u{6548}\u{ff0c}\u{8bf7}\u{91cd}\u{65b0}\u{52a0}\u{5165}\u{6e38}\u{620f}\u{5e76}\u{9009}\u{62e9}'\u{5426}'"
,'','(\u{4e0d}\u{5f71}\u{54cd}\u{6e38}\u{620f}\u{529f}\u{80fd})'},Options={
'\u{662f}','\u{5426}'}}=='\u{662f}'u:Fire('BeginHooks',{PatchFunctions=x})